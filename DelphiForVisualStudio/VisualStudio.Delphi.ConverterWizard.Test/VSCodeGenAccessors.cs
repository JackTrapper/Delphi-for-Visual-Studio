// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace VisualStudio.Delphi.ConverterWizard.Test
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
  }
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::VisualStudio.Delphi.ConverterWizard.DelphiToVisualStudio));
    
    internal VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor(global::VisualStudio.Delphi.ConverterWizard.DelphiToVisualStudio target) : 
            base(target, m_privateType) {
    }
    
    internal static void AddConvert(string aFileName) {
        object[] args = new object[] {
                aFileName};
        m_privateType.InvokeStatic("AddConvert", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal static void RegisterClass(global::System.Type regObject) {
        object[] args = new object[] {
                regObject};
        m_privateType.InvokeStatic("RegisterClass", new System.Type[] {
                    typeof(global::System.Type)}, args);
    }
    
    internal static void UnregisterClass(global::System.Type regObject) {
        object[] args = new object[] {
                regObject};
        m_privateType.InvokeStatic("UnregisterClass", new System.Type[] {
                    typeof(global::System.Type)}, args);
    }
    
    internal static bool FindTextInFile(string aText, string aFileName) {
        object[] args = new object[] {
                aText,
                aFileName};
        bool ret = ((bool)(m_privateType.InvokeStatic("FindTextInFile", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static void AddRegistryValue(string aKey, string aName, string aValue) {
        object[] args = new object[] {
                aKey,
                aName,
                aValue};
        m_privateType.InvokeStatic("AddRegistryValue", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void DeleteRegistryValue(string aKey, string aName) {
        object[] args = new object[] {
                aKey,
                aName};
        m_privateType.InvokeStatic("DeleteRegistryValue", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static string GetRegistryValue(string aKey, string aName) {
        object[] args = new object[] {
                aKey,
                aName};
        string ret = ((string)(m_privateType.InvokeStatic("GetRegistryValue", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static void WriteVSZFile(string aFileName, string aGUID) {
        object[] args = new object[] {
                aFileName,
                aGUID};
        m_privateType.InvokeStatic("WriteVSZFile", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void AddTextToFile(string lMyLine, string aFileName) {
        object[] args = new object[] {
                lMyLine,
                aFileName};
        m_privateType.InvokeStatic("AddTextToFile", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void DeleteTextFromFile(string aMyline, string aFileName) {
        object[] args = new object[] {
                aMyline,
                aFileName};
        m_privateType.InvokeStatic("DeleteTextFromFile", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void DeleteFile(string aFileName) {
        object[] args = new object[] {
                aFileName};
        m_privateType.InvokeStatic("DeleteFile", new System.Type[] {
                    typeof(string)}, args);
    }
}
}
