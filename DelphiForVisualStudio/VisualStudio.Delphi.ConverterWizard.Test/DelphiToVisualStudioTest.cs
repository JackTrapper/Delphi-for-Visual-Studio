// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.IO;
using System.Collections.Generic;
using Microsoft.Win32;
using EnvDTE;

namespace VisualStudio.Delphi.ConverterWizard.Test
{
  /// <summary>
  ///This is a test class for VisualStudio.Delphi.ConverterWizard.DelphiToVisualStudio and is intended
  ///to contain all VisualStudio.Delphi.ConverterWizard.DelphiToVisualStudio Unit Tests
  ///</summary>
  [TestClass()]
  public class DelphiToVisualStudioTest
  {


    private TestContext testContextInstance;

    /// <summary>
    ///Gets or sets the test context which provides
    ///information about and functionality for the current test run.
    ///</summary>
    public TestContext TestContext
    {
      get
      {
        return testContextInstance;
      }
      set
      {
        testContextInstance = value;
      }
    }
    #region Additional test attributes
    // 
    //You can use the following additional attributes as you write your tests:
    //
    //Use ClassInitialize to run code before running the first test in the class
    //
    //[ClassInitialize()]
    //public static void MyClassInitialize(TestContext testContext)
    //{
    //}
    //
    //Use ClassCleanup to run code after all tests in a class have run
    //
    //[ClassCleanup()]
    //public static void MyClassCleanup()
    //{
    //}
    //
    //Use TestInitialize to run code before running each test
    //
    //[TestInitialize()]
    //public void MyTestInitialize()
    //{
    //}
    //
    //Use TestCleanup to run code after each test has run
    //
    //[TestCleanup()]
    //public void MyTestCleanup()
    //{
    //}
    //
    #endregion


    /// <summary>
    ///A test for Execute (object, int, ref object[], ref object[], ref wizardResult)
    ///</summary>
    [TestMethod()]
    public void ExecuteTest()
    {
      DelphiToVisualStudio target = new DelphiToVisualStudio();

      object Application = null; // TODO: Initialize to an appropriate value

      int hwndOwner = 0; // TODO: Initialize to an appropriate value

      object[] ContextParams = null; // TODO: Initialize to an appropriate value
      object[] ContextParams_expected = null; // TODO: Initialize to an appropriate value

      object[] CustomParams = null; // TODO: Initialize to an appropriate value
      object[] CustomParams_expected = null; // TODO: Initialize to an appropriate value

      wizardResult retval = wizardResult.wizardResultBackOut; // TODO: Initialize to an appropriate value
      wizardResult retval_expected = wizardResult.wizardResultBackOut; // TODO: Initialize to an appropriate value

      target.Execute(Application, hwndOwner, ref ContextParams, ref CustomParams, ref retval);

      CollectionAssert.AreEqual(ContextParams_expected, ContextParams, "ContextParams_Execute_expected was not set correctly.");
      CollectionAssert.AreEqual(CustomParams_expected, CustomParams, "CustomParams_Execute_expected was not set correctly.");
      Assert.AreEqual(retval_expected, retval, "retval_Execute_expected was not set correctly.");
      Assert.Inconclusive("A method that does not return a value cannot be verified.");
    }
 
    /// <summary>
    ///A test for AddRegistryValue (string, string, string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void AddRegistryValueTest()
    {
      string aKey = "SOFTWARE\\Microsoft\\VisualStudio\\8.0Exp"; // TODO: Initialize to an appropriate value

      string aName = "MyTestKeyName"; // TODO: Initialize to an appropriate value

      string aValue = "MyTestKeyValue"; // TODO: Initialize to an appropriate value

      VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.AddRegistryValue(aKey, aName, aValue);
      string lresult = VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.GetRegistryValue(aKey,aName);
      VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.DeleteRegistryValue(aKey,aName);
      Assert.AreEqual(aValue,lresult,"Key value did not save");
    }

    /// <summary>
    ///A test for AddTextToFile (string, string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void AddTextToFileTest()
    {
      string lMyLine = "This is my line of text"; 
      string aFileName = Path.Combine(Directory.GetCurrentDirectory(),"Test.txt");

      try
      {
        using (StreamWriter lWriter = new StreamWriter(new FileStream(aFileName, FileMode.Create)))
        {
          lWriter.WriteLine("add lines of text");
          lWriter.WriteLine("here");
          lWriter.Flush();
          lWriter.Close();
        }

        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.AddTextToFile(lMyLine, aFileName);
      }
      finally
      {
        if (File.Exists(aFileName))
          File.Delete(aFileName);
      }
    }

    /// <summary>
    ///A test for DeleteFile (string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void DeleteFileTest()
    {
      string lMyLine = "This is my line of text";
      string aFileName = Path.Combine(Directory.GetCurrentDirectory(), "Test.txt");

      try
      {
        using (StreamWriter lWriter = new StreamWriter(new FileStream(aFileName, FileMode.Create)))
        {
          lWriter.WriteLine("add lines of text");
          lWriter.WriteLine("here");
          lWriter.Flush();
          lWriter.Close();
        }

        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.AddTextToFile(lMyLine, aFileName);
      }
      finally
      {
        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.DeleteFile(aFileName);
        Assert.IsFalse(File.Exists(aFileName));
      }
    }

    /// <summary>
    ///A test for DeleteTextFromFile (string, string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void DeleteTextFromFileTest()
    {
      string lMyLine = "This is my line of text";
      string aFileName = Path.Combine(Directory.GetCurrentDirectory(), "Test.txt");

      try
      {
        using (StreamWriter lWriter = new StreamWriter(new FileStream(aFileName, FileMode.Create)))
        {
          lWriter.WriteLine("add lines of text");
          lWriter.WriteLine("here");
          lWriter.Flush();
          lWriter.Close();
        }

        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.AddTextToFile(lMyLine, aFileName);
        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.DeleteTextFromFile(lMyLine, aFileName);
      }
      finally
      {
        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.DeleteFile(aFileName);
        Assert.IsFalse(File.Exists(aFileName));
      }
    }

    /// <summary>
    ///A test for FindTextInFile (string, string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void FindTextInFileTest()
    {
      string lMyLine = "This is my line of text";
      string aFileName = Path.Combine(Directory.GetCurrentDirectory(), "Test.txt");

      try
      {
        using (StreamWriter lWriter = new StreamWriter(new FileStream(aFileName, FileMode.Create)))
        {
          lWriter.WriteLine("add lines of text");
          lWriter.WriteLine("here");
          lWriter.Flush();
          lWriter.Close();
        }

        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.AddTextToFile(lMyLine, aFileName);
        Assert.IsTrue(VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.FindTextInFile(lMyLine, aFileName));
      }
      finally
      {
        VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.DeleteFile(aFileName);
        Assert.IsFalse(File.Exists(aFileName));
      }
    }

    /// <summary>
    ///A test for WriteVSZFile (string, string)
    ///</summary>
    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void WriteVSZFileTest()
    {
      string aFileName = Path.Combine(Directory.GetCurrentDirectory(), "Test.VSZ");

      string aGUID = "{C0EDFF03-A1C7-418a-89BA-F2DB1BEC407C}"; // TODO: Initialize to an appropriate value

      VisualStudio.Delphi.ConverterWizard.Test.VisualStudio_Delphi_ConverterWizard_DelphiToVisualStudioAccessor.WriteVSZFile(aFileName, aGUID);

      Assert.IsTrue(File.Exists(aFileName));
    }

    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void UnregRegTest()
    {
      DelphiToVisualStudio.UnregisterWithVisualStudio();
      DelphiToVisualStudio.RegisterWithVisualStudio();
    }

    [DeploymentItem("VisualStudio.Delphi.ConverterWizard.dll")]
    [TestMethod()]
    public void OpenDialog()
    {
      WizardDialog lWiz = new WizardDialog();
      lWiz.DelphiProjectFilters = "test|*.dpr";
      lWiz.ShowDialog();
    }


  }


}
