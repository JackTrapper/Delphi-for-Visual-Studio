using System.IO;
using Microsoft.VisualStudio.Package;
// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using VisualStudio.Delphi.Language;

namespace TestDelphiScanner
{
  /// <summary>
  ///This is a test class for VisualStudio.Delphi.Language.DelphiScanner and is intended
  ///to contain all VisualStudio.Delphi.Language.DelphiScanner Unit Tests
  ///</summary>
  [TestClass()]
  public class DelphiScannerTest
  {


    private TestContext testContextInstance;

    /// <summary>
    ///Gets or sets the test context which provides
    ///information about and functionality for the current test run.
    ///</summary>
    public TestContext TestContext
    {
      get
      {
        return testContextInstance;
      }
      set
      {
        testContextInstance = value;
      }
    }
    #region Additional test attributes
    // 
    //You can use the following additional attributes as you write your tests:
    //
    //Use ClassInitialize to run code before running the first test in the class
    //
    //[ClassInitialize()]
    //public static void MyClassInitialize(TestContext testContext)
    //{
    //}
    //
    //Use ClassCleanup to run code after all tests in a class have run
    //
    //[ClassCleanup()]
    //public static void MyClassCleanup()
    //{
    //}
    //
    //Use TestInitialize to run code before running each test
    //
    //[TestInitialize()]
    //public void MyTestInitialize()
    //{
    //}
    //
    //Use TestCleanup to run code after each test has run
    //
    //[TestCleanup()]
    //public void MyTestCleanup()
    //{
    //}
    //
    #endregion


    /// <summary>
    ///A test for DelphiScanner ()
    ///</summary>
    [TestMethod()]
    public void ConstructorTest()
    {
      DelphiScanner target = new DelphiScanner();

    }

    /// <summary>
    ///A test for DelphiScanner (TextReader)
    ///</summary>
    [TestMethod()]
    public void ConstructorTest1()
    {
      TextReader @in = null; 

      DelphiScanner target = new DelphiScanner(@in);
    }

    /// <summary>
    ///A test for ScanTokenAndProvideInfoAboutIt (TokenInfo, ref int)
    ///</summary>
    [TestMethod()]
    public void ScanTokenAndProvideInfoAboutItTest()
    {
      DelphiScanner target = new DelphiScanner(new StringReader("Identifier  AndWhiteSpace"));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Identifier, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(0, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(9, tokenInfo.EndIndex , "TokenInfo.EndIndex did not return expected value");

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.WhiteSpace, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(10, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(11, tokenInfo.EndIndex, "TokenInfo.EndIndex did not return expected value");

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Identifier, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(12, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(24, tokenInfo.EndIndex , "TokenInfo.EndIndex did not return expected value");

    }

    [TestMethod()]
    public void TraditionalCommentTest()
    {
      DelphiScanner target = new DelphiScanner(new StringReader("Identifier(*x\r\nxxx *) AndWhiteSpace"));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(10, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(20, tokenInfo.EndIndex, "TokenInfo.EndIndex did not return expected value");
    }

    [TestMethod()]
    public void EndofLineCommentTest()
    {
      DelphiScanner target = new DelphiScanner(new StringReader("//Identifier(*x"));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.LineComment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(0, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(14, tokenInfo.EndIndex, "TokenInfo.EndIndex did not return expected value");
    }

    [TestMethod()]
    public void KeyWordCaseTest()
    {
      DelphiScanner target = new DelphiScanner(new StringReader("Identifier AnD AndWhiteSpace"));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Keyword, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(11, tokenInfo.StartIndex, "TokenInfo.StartIndex did not return expected value");
      Assert.AreEqual(13, tokenInfo.EndIndex, "TokenInfo.EndIndex did not return expected value");
    }

    [TestMethod()]
    public void DelphiStringTest()
    {
      string lInputData = "Identifier 'This is a test string''ss wieth ''' AndWhiteSpace";
      string lExpectedTokenString = "'This is a test string''ss wieth '''";
      DelphiScanner target = new DelphiScanner(new StringReader(lInputData));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.String, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex,tokenInfo.EndIndex-tokenInfo.StartIndex+1), 
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
    }

    [TestMethod()]
    public void DelphiStringWithChrLiteralsTest()
    {
      string lInputData = "Identifier #$0A#10'This is a test string''ss wieth '''#13#10 AndWhiteSpace";
      string lExpectedTokenString = "#$0A#10'This is a test string''ss wieth '''#13#10";
      DelphiScanner target = new DelphiScanner(new StringReader(lInputData));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.String, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
    }

    /// <summary>
    /// For issue number 1880 
    /// </summary>
    [TestMethod()]
    public void NestedLineCommentsInCurrlyBraceCommentTest()
    {
      string lInputData = "Ientifier{\\\\\\\\\\\\\\\\\r\n\\\\test 1\r\n \\\\test2 \r\n  \\\\\\\\\\}test  AndWhiteSpace";
      string lExpectedTokenString = "{\\\\\\\\\\\\\\\\\r\n\\\\test 1\r\n \\\\test2 \r\n  \\\\\\\\\\}";
      DelphiScanner target = new DelphiScanner(new StringReader(lInputData));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 0; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
    }

    /// <summary>
    /// Second test For issue number 1880 
    /// </summary>
    [TestMethod()]
    public void NoneEndedCommentTest()
    {
      string lInputData = "Ientifier{\\\\\\\\\\\\\\\\";
      string lExpectedTokenString = "{\\\\\\\\\\\\\\\\";
      DelphiScanner target = new DelphiScanner(new StringReader(lInputData));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 1; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
    }

    /// <summary>
    /// Second test For issue number 1880 
    /// </summary>
    [TestMethod()]
    public void VSOneLineAtATimeCommentTest()
    {
      string lInputData = "Ientifier{\\\\\\\\\\\\\\\\";
      string lExpectedTokenString = "{\\\\\\\\\\\\\\\\";
      DelphiScanner target = new DelphiScanner(new StringReader(lInputData));

      TokenInfo tokenInfo = new TokenInfo();

      int state = 0; // TODO: Initialize to an appropriate value
      int state_expected = 1; // TODO: Initialize to an appropriate value

      bool expected = true;
      bool actual;

      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
      /*
       * This is the next line that may apear in a comment
       * 
       */
      lInputData = " this Should all be a comment ";
      lExpectedTokenString = " this Should all be a comment ";

      target.SetSource(lInputData, 0);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
      /*
       * Lets put some imbeaded comments in
       * 
       */
      lInputData = " (*imbead a comment*)  all is comments // even here";
      lExpectedTokenString = " (*imbead a comment*)  all is comments // even here";

      target.SetSource(lInputData, 0);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
      /*
       * End this comments now
       * 
       */
      lInputData = " End here }  nexttoken";
      lExpectedTokenString = " End here }";

      state_expected = 0;


      target.SetSource(lInputData, 0);
      actual = target.ScanTokenAndProvideInfoAboutIt(tokenInfo, ref state);

      Assert.AreEqual(state_expected, state, "state_ScanTokenAndProvideInfoAboutIt_expected was not set correctly.");
      Assert.AreEqual(expected, actual, "VisualStudio.Delphi.Language.DelphiScanner.ScanTokenAndProvideInfoAboutIt did not" +
              " return the expected value.");

      Assert.AreEqual(TokenType.Comment, tokenInfo.Type, "TokenInfo.TokenType did not return expected value");
      Assert.AreEqual(lExpectedTokenString, lInputData.Substring(tokenInfo.StartIndex, tokenInfo.EndIndex - tokenInfo.StartIndex + 1),
                  "TokenInfo.StartIndex and TokenInfo.EndIndex did not return expected value");
    }

    [TestMethod()]
    public void DelphiStringToTextTest()
    {
      string lInput = "#13#10'It''s hard to do'#$0D#$0A'This kind of testing'#255#$FF";
      string lExpected = "\r\nIt's hard to do\r\nThis kind of testing\xFF\xFF";

      string lActual = TDelphiSource.DelphiStringToText(lInput);

      Assert.AreEqual(lExpected, lActual, "DelphiStringToText has result is incorrect.");
    }

    [TestMethod()]
    public void TextToDelphiStringTest()
    {
      string lInput = "\r\nIt's hard to do\r\nThis kind of testing\xFF\xFF";
      string lExpected = "#13#10'It''s hard to do'#13#10'This kind of testing'#255#255";

      string lActual = TDelphiSource.TextToDelphiString(lInput);

      Assert.AreEqual(lExpected, lActual, "DelphiStringToText has result is incorrect.");
    }

    /// <summary>
    ///A test for SetSource (string, int)
    ///</summary>
    [TestMethod()]
    public void SetSourceTest()
    {
      DelphiScanner target = TestDelphiScanner.VisualStudio_Delphi_Language_DelphiScannerAccessor.CreatePrivate();

      string source = "Test data"; 

      int offset = 0; 

      target.SetSource(source, offset);

    }



  }


}
