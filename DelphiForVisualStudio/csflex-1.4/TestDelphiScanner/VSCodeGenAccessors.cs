// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestDelphiScanner
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class VisualStudio_Delphi_Language_DelphiScannerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::VisualStudio.Delphi.Language.DelphiScanner));
    
    internal VisualStudio_Delphi_Language_DelphiScannerAccessor(global::VisualStudio.Delphi.Language.DelphiScanner target) : 
            base(target, m_privateType) {
    }
    
    internal static int SCANNER_Eof {
        get {
            int ret = ((int)(m_privateType.GetStaticField("SCANNER_Eof")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SCANNER_Eof", value);
        }
    }
    
    internal static int SCANNER_BufferSize {
        get {
            int ret = ((int)(m_privateType.GetStaticField("SCANNER_BufferSize")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SCANNER_BufferSize", value);
        }
    }
    
    internal static bool SCANNER_SpuriousWarningsSucks {
        get {
            bool ret = ((bool)(m_privateType.GetStaticField("SCANNER_SpuriousWarningsSucks")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SCANNER_SpuriousWarningsSucks", value);
        }
    }
    
    internal static int YYINITIAL {
        get {
            int ret = ((int)(m_privateType.GetStaticField("YYINITIAL")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("YYINITIAL", value);
        }
    }
    
    internal static ushort[] ZZ_CMAP_PACKED {
        get {
            ushort[] ret = ((ushort[])(m_privateType.GetStaticField("ZZ_CMAP_PACKED")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_CMAP_PACKED", value);
        }
    }
    
    internal static char[] ZZ_CMAP {
        get {
            char[] ret = ((char[])(m_privateType.GetStaticField("ZZ_CMAP")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_CMAP", value);
        }
    }
    
    internal static int[] ZZ_ACTION {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("ZZ_ACTION")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ACTION", value);
        }
    }
    
    internal static ushort[] ZZ_ACTION_PACKED_0 {
        get {
            ushort[] ret = ((ushort[])(m_privateType.GetStaticField("ZZ_ACTION_PACKED_0")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ACTION_PACKED_0", value);
        }
    }
    
    internal static int[] ZZ_ROWMAP {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("ZZ_ROWMAP")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ROWMAP", value);
        }
    }
    
    internal static ushort[] ZZ_ROWMAP_PACKED_0 {
        get {
            ushort[] ret = ((ushort[])(m_privateType.GetStaticField("ZZ_ROWMAP_PACKED_0")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ROWMAP_PACKED_0", value);
        }
    }
    
    internal static int[] ZZ_TRANS {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("ZZ_TRANS")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_TRANS", value);
        }
    }
    
    internal static ushort[] ZZ_TRANS_PACKED_0 {
        get {
            ushort[] ret = ((ushort[])(m_privateType.GetStaticField("ZZ_TRANS_PACKED_0")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_TRANS_PACKED_0", value);
        }
    }
    
    internal static int ZZ_UNKNOWN_ERROR {
        get {
            int ret = ((int)(m_privateType.GetStaticField("ZZ_UNKNOWN_ERROR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_UNKNOWN_ERROR", value);
        }
    }
    
    internal static int ZZ_NO_MATCH {
        get {
            int ret = ((int)(m_privateType.GetStaticField("ZZ_NO_MATCH")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_NO_MATCH", value);
        }
    }
    
    internal static int ZZ_PUSHBACK_2BIG {
        get {
            int ret = ((int)(m_privateType.GetStaticField("ZZ_PUSHBACK_2BIG")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_PUSHBACK_2BIG", value);
        }
    }
    
    internal static string[] ZZ_ERROR_MSG {
        get {
            string[] ret = ((string[])(m_privateType.GetStaticField("ZZ_ERROR_MSG")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ERROR_MSG", value);
        }
    }
    
    internal static int[] ZZ_ATTRIBUTE {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("ZZ_ATTRIBUTE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ATTRIBUTE", value);
        }
    }
    
    internal static ushort[] ZZ_ATTRIBUTE_PACKED_0 {
        get {
            ushort[] ret = ((ushort[])(m_privateType.GetStaticField("ZZ_ATTRIBUTE_PACKED_0")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ZZ_ATTRIBUTE_PACKED_0", value);
        }
    }
    
    internal global::System.IO.TextReader FReader {
        get {
            global::System.IO.TextReader ret = ((global::System.IO.TextReader)(m_privateObject.GetField("FReader")));
            return ret;
        }
        set {
            m_privateObject.SetField("FReader", value);
        }
    }
    
    internal int FState {
        get {
            int ret = ((int)(m_privateObject.GetField("FState")));
            return ret;
        }
        set {
            m_privateObject.SetField("FState", value);
        }
    }
    
    internal int FLexicalState {
        get {
            int ret = ((int)(m_privateObject.GetField("FLexicalState")));
            return ret;
        }
        set {
            m_privateObject.SetField("FLexicalState", value);
        }
    }
    
    internal char[] FBuffer {
        get {
            char[] ret = ((char[])(m_privateObject.GetField("FBuffer")));
            return ret;
        }
        set {
            m_privateObject.SetField("FBuffer", value);
        }
    }
    
    internal int FMarkedPos {
        get {
            int ret = ((int)(m_privateObject.GetField("FMarkedPos")));
            return ret;
        }
        set {
            m_privateObject.SetField("FMarkedPos", value);
        }
    }
    
    internal int FPushbackPos {
        get {
            int ret = ((int)(m_privateObject.GetField("FPushbackPos")));
            return ret;
        }
        set {
            m_privateObject.SetField("FPushbackPos", value);
        }
    }
    
    internal int zzCurrentPos {
        get {
            int ret = ((int)(m_privateObject.GetField("zzCurrentPos")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzCurrentPos", value);
        }
    }
    
    internal int zzStartRead {
        get {
            int ret = ((int)(m_privateObject.GetField("zzStartRead")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzStartRead", value);
        }
    }
    
    internal int zzEndRead {
        get {
            int ret = ((int)(m_privateObject.GetField("zzEndRead")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzEndRead", value);
        }
    }
    
    internal int yyline {
        get {
            int ret = ((int)(m_privateObject.GetField("yyline")));
            return ret;
        }
        set {
            m_privateObject.SetField("yyline", value);
        }
    }
    
    internal int yychar {
        get {
            int ret = ((int)(m_privateObject.GetField("yychar")));
            return ret;
        }
        set {
            m_privateObject.SetField("yychar", value);
        }
    }
    
    internal int yycolumn {
        get {
            int ret = ((int)(m_privateObject.GetField("yycolumn")));
            return ret;
        }
        set {
            m_privateObject.SetField("yycolumn", value);
        }
    }
    
    internal bool zzAtBOL {
        get {
            bool ret = ((bool)(m_privateObject.GetField("zzAtBOL")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzAtBOL", value);
        }
    }
    
    internal bool zzAtEOF {
        get {
            bool ret = ((bool)(m_privateObject.GetField("zzAtEOF")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzAtEOF", value);
        }
    }
    
    internal global::System.Collections.Stack zzStreams {
        get {
            global::System.Collections.Stack ret = ((global::System.Collections.Stack)(m_privateObject.GetField("zzStreams")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzStreams", value);
        }
    }
    
    internal bool zzEOFDone {
        get {
            bool ret = ((bool)(m_privateObject.GetField("zzEOFDone")));
            return ret;
        }
        set {
            m_privateObject.SetField("zzEOFDone", value);
        }
    }
    
    internal static global::VisualStudio.Delphi.Language.DelphiScanner CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::VisualStudio.Delphi.Language.DelphiScanner), new System.Type[0], args);
        return ((global::VisualStudio.Delphi.Language.DelphiScanner)(priv_obj.Target));
    }
    
    internal static int[] ScannerUnpackAction() {
        object[] args = new object[0];
        int[] ret = ((int[])(m_privateType.InvokeStatic("ScannerUnpackAction", new System.Type[0], args)));
        return ret;
    }
    
    internal static int ScannerUnpackAction(ushort[] packed, int offset, int[] result) {
        object[] args = new object[] {
                packed,
                offset,
                result};
        int ret = ((int)(m_privateType.InvokeStatic("ScannerUnpackAction", new System.Type[] {
                    typeof(ushort).MakeArrayType(),
                    typeof(int),
                    typeof(int).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static int[] ScannerUnpackRowMap() {
        object[] args = new object[0];
        int[] ret = ((int[])(m_privateType.InvokeStatic("ScannerUnpackRowMap", new System.Type[0], args)));
        return ret;
    }
    
    internal static int ScannerUnpackRowMap(ushort[] packed, int offset, int[] result) {
        object[] args = new object[] {
                packed,
                offset,
                result};
        int ret = ((int)(m_privateType.InvokeStatic("ScannerUnpackRowMap", new System.Type[] {
                    typeof(ushort).MakeArrayType(),
                    typeof(int),
                    typeof(int).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static int[] ScannerUnpackTrans() {
        object[] args = new object[0];
        int[] ret = ((int[])(m_privateType.InvokeStatic("ScannerUnpackTrans", new System.Type[0], args)));
        return ret;
    }
    
    internal static int ScannerUnpackTrans(ushort[] packed, int offset, int[] result) {
        object[] args = new object[] {
                packed,
                offset,
                result};
        int ret = ((int)(m_privateType.InvokeStatic("ScannerUnpackTrans", new System.Type[] {
                    typeof(ushort).MakeArrayType(),
                    typeof(int),
                    typeof(int).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static int[] ScannerUnpackAttribute() {
        object[] args = new object[0];
        int[] ret = ((int[])(m_privateType.InvokeStatic("ScannerUnpackAttribute", new System.Type[0], args)));
        return ret;
    }
    
    internal static int ScannerUnpackAttribute(ushort[] packed, int offset, int[] result) {
        object[] args = new object[] {
                packed,
                offset,
                result};
        int ret = ((int)(m_privateType.InvokeStatic("ScannerUnpackAttribute", new System.Type[] {
                    typeof(ushort).MakeArrayType(),
                    typeof(int),
                    typeof(int).MakeArrayType()}, args)));
        return ret;
    }
    
    internal global::Microsoft.VisualStudio.Package.TokenInfo GetTokenInfo(int aAction, global::Microsoft.VisualStudio.Package.TokenType aTokenType) {
        object[] args = new object[] {
                aAction,
                aTokenType};
        global::Microsoft.VisualStudio.Package.TokenInfo ret = ((global::Microsoft.VisualStudio.Package.TokenInfo)(m_privateObject.Invoke("GetTokenInfo", new System.Type[] {
                    typeof(int),
                    typeof(global::Microsoft.VisualStudio.Package.TokenType)}, args)));
        return ret;
    }
    
    internal static char[] ScannerUnpackCMap(ushort[] packed) {
        object[] args = new object[] {
                packed};
        char[] ret = ((char[])(m_privateType.InvokeStatic("ScannerUnpackCMap", new System.Type[] {
                    typeof(ushort).MakeArrayType()}, args)));
        return ret;
    }
    
    internal bool zzRefill() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("zzRefill", new System.Type[0], args)));
        return ret;
    }
    
    internal void zzScanError(int errorCode) {
        object[] args = new object[] {
                errorCode};
        m_privateObject.Invoke("zzScanError", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void zzDoEOF() {
        object[] args = new object[0];
        m_privateObject.Invoke("zzDoEOF", new System.Type[0], args);
    }
}
}
