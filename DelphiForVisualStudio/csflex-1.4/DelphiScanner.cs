/* The following code was generated by CSFlex 1.4 on 03/10/2007 */

#line 1 "..\..\DelphiScanner.flex"
/* This file is part of "Delphi For Visual Studio" project
 * http://www.codeplex.com/Delphi4VisualStudio
 * Copyright (c) 2006 Davinci Jeremie. All rights reserved.
 * Created 2007/04/20 by Davinci Jeremie (Web: http://www.Jeremie.ca )
 * 
 * LICENSE: LGPL
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License (LGPL) as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * For more details on the GNU Lesser General Public License,
 * see http://www.gnu.org/copyleft/lesser.html
 *************************************************************************/
using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;

using Microsoft.VisualStudio.Package;

namespace VisualStudio.Delphi.Language
{


#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 03/10/2007 from the specification file
 * <tt>../../DelphiScanner.flex</tt>
 */
class DelphiScanner: IScanner {

  /** This character denotes the end of file */
  public const int SCANNER_Eof = -1;

  /** initial size of the lookahead buffer */
  private const int SCANNER_BufferSize = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool SCANNER_SpuriousWarningsSucks = true;

  /** lexical states */
  public const int COMMENT1 = 1;
  public const int COMMENT2 = 2;
  public const int ASSEMBLER = 0;
  public const int YYINITIAL = 0;
  static DelphiScanner()
  {
    ZZ_CMAP = ScannerUnpackCMap(ZZ_CMAP_PACKED);
    ZZ_ACTION = ScannerUnpackAction();
    ZZ_ROWMAP = ScannerUnpackRowMap();
    ZZ_TRANS = ScannerUnpackTrans();
    ZZ_ATTRIBUTE = ScannerUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly ushort[] ZZ_CMAP_PACKED = new ushort[] {
    9, 0, 1, 3, 1, 2, 1, 0, 1, 3, 1, 1, 18, 0, 1, 3, 2, 0, 1, 15,
    1, 5, 1, 7, 1, 0, 1, 19, 1, 9, 1, 11, 1, 10, 1, 18, 1, 28, 1, 18,
    1, 16, 1, 8, 10, 12, 1, 20, 1, 27, 1, 22, 1, 21, 1, 23, 1, 0, 1, 26,
    1, 29, 1, 30, 1, 37, 1, 39, 1, 17, 1, 14, 1, 42, 1, 49, 1, 43, 1, 50,
    1, 51, 1, 33, 1, 41, 1, 38, 1, 32, 1, 44, 1, 52, 1, 36, 1, 31, 1, 35,
    1, 34, 1, 45, 1, 46, 1, 47, 1, 40, 1, 48, 1, 24, 1, 0, 1, 25, 1, 26,
    1, 13, 1, 0, 1, 29, 1, 30, 1, 37, 1, 39, 1, 17, 1, 14, 1, 42, 1, 49,
    1, 43, 1, 50, 1, 51, 1, 33, 1, 41, 1, 38, 1, 32, 1, 44, 1, 52, 1, 36,
    1, 31, 1, 35, 1, 34, 1, 45, 1, 46, 1, 47, 1, 40, 1, 48, 1, 4, 1, 0,
    1, 6, 0xff82, 0, 0 };

  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP;

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    1, 0, 1, 1, 1, 2, 1, 3, 3, 4, 2, 3, 1, 5, 1, 6,
    1, 5, 1, 7, 1, 8, 2, 9, 1, 3, 1, 10, 1, 9, 1, 3,
    1, 11, 2, 5, 1, 12, 1, 13, 1, 14, 1, 11, 18, 9, 1, 1,
    2, 15, 1, 1, 1, 16, 4, 1, 1, 2, 2, 17, 3, 2, 1, 5,
    2, 2, 1, 18, 2, 0, 1, 19, 1, 20, 1, 21, 4, 0, 4, 9,
    1, 0, 1, 22, 3, 9, 1, 0, 1, 23, 1, 24, 1, 25, 1, 26,
    1, 27, 1, 9, 1, 28, 7, 9, 1, 29, 2, 9, 1, 30, 1, 31,
    6, 9, 1, 32, 13, 9, 1, 33, 5, 9, 1, 34, 1, 35, 1, 36,
    11, 9, 1, 18, 2, 1, 1, 20, 3, 1, 1, 0, 1, 18, 2, 2,
    1, 18, 1, 20, 1, 21, 1, 37, 2, 2, 1, 0, 1, 2, 1, 38,
    1, 39, 3, 40, 2, 0, 1, 41, 1, 42, 3, 9, 1, 43, 1, 0,
    1, 9, 1, 44, 3, 9, 1, 0, 1, 9, 1, 45, 1, 9, 1, 46,
    1, 9, 1, 47, 4, 9, 1, 48, 1, 49, 1, 9, 1, 50, 7, 9,
    1, 51, 15, 9, 1, 52, 1, 9, 1, 53, 6, 9, 1, 54, 1, 9,
    1, 55, 12, 9, 1, 56, 4, 9, 1, 57, 1, 1, 1, 38, 1, 0,
    1, 39, 1, 0, 1, 20, 1, 2, 1, 58, 2, 9, 1, 59, 1, 9,
    2, 0, 1, 60, 3, 9, 1, 0, 1, 23, 13, 9, 1, 61, 1, 9,
    1, 62, 1, 63, 1, 64, 1, 65, 6, 9, 1, 66, 4, 9, 1, 67,
    1, 68, 8, 9, 1, 69, 17, 9, 1, 70, 4, 9, 1, 0, 3, 9,
    1, 23, 2, 9, 1, 71, 1, 72, 7, 9, 1, 73, 1, 74, 1, 9,
    1, 75, 6, 9, 1, 76, 1, 9, 1, 77, 1, 78, 9, 9, 1, 79,
    14, 9, 1, 80, 1, 81, 5, 9, 1, 82, 1, 83, 3, 9, 1, 84,
    1, 85, 1, 9, 1, 86, 4, 9, 1, 87, 2, 9, 1, 88, 7, 9,
    1, 89, 1, 9, 1, 90, 5, 9, 1, 91, 3, 9, 1, 92, 7, 9,
    1, 93, 1, 9, 1, 94, 2, 9, 1, 95, 3, 9, 1, 96, 2, 9,
    1, 97, 7, 9, 1, 98, 2, 9, 1, 99, 1, 100, 4, 9, 1, 101,
    4, 9, 1, 102, 1, 9, 1, 103, 1, 104, 1, 105, 1, 106, 1, 9,
    1, 107, 1, 108, 1, 109, 1, 110, 1, 111, 1, 112, 1, 9, 1, 113,
    1, 9, 1, 114, 1, 9, 1, 115, 7, 9, 1, 116, 3, 9, 1, 117,
    4, 9, 1, 118, 2, 9, 1, 119, 1, 9, 1, 120, 1, 9, 1, 121,
    1, 122, 1, 123, 4, 9, 1, 124, 1, 125, 2, 9, 1, 126, 2, 9,
    1, 127, 1, 128, 2, 9, 1, 129, 6, 9, 1, 130, 1, 131, 1, 132, 0 };

  private static int [] ScannerUnpackAction() {
    int [] result = new int[540];
    int offset = 0;
    offset = ScannerUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int ScannerUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 53, 0, 106, 0, 159, 0, 212, 0, 159, 0, 0x0109, 0, 0x013e,
    0, 0x0173, 0, 0x01a8, 0, 0x01dd, 0, 159, 0, 159, 0, 0x0212, 0, 0x0247, 0, 0x027c,
    0, 0x02b1, 0, 159, 0, 0x02e6, 0, 0x031b, 0, 0x0350, 0, 0x0385, 0, 0x03ba, 0, 159,
    0, 159, 0, 159, 0, 159, 0, 0x03ef, 0, 0x0424, 0, 0x0459, 0, 0x048e, 0, 0x04c3,
    0, 0x04f8, 0, 0x052d, 0, 0x0562, 0, 0x0597, 0, 0x05cc, 0, 0x0601, 0, 0x0636, 0, 0x066b,
    0, 0x06a0, 0, 0x06d5, 0, 0x070a, 0, 0x073f, 0, 0x0774, 0, 0x07a9, 0, 0x07de, 0, 0x07a9,
    0, 0x0813, 0, 159, 0, 0x0848, 0, 0x087d, 0, 0x08b2, 0, 0x08e7, 0, 0x091c, 0, 0x0951,
    0, 0x091c, 0, 0x0986, 0, 0x09bb, 0, 0x09f0, 0, 0x0a25, 0, 0x0a5a, 0, 0x0a8f, 0, 159,
    0, 0x0ac4, 0, 0x0af9, 0, 0x0173, 0, 0x0b2e, 0, 159, 0, 0x0b63, 0, 0x0b98, 0, 0x0bcd,
    0, 0x0c02, 0, 0x0c37, 0, 0x0c6c, 0, 0x0ca1, 0, 0x0cd6, 0, 0x0d0b, 0, 0x0d40, 0, 0x0d75,
    0, 0x0daa, 0, 0x0ddf, 0, 0x031b, 0, 0x0e14, 0, 159, 0, 159, 0, 159, 0, 159,
    0, 0x0e49, 0, 0x0e7e, 0, 0x0eb3, 0, 0x0ee8, 0, 0x0f1d, 0, 0x0f52, 0, 0x0f87, 0, 0x0fbc,
    0, 0x0ff1, 0, 0x0247, 0, 0x1026, 0, 0x105b, 0, 0x0247, 0, 0x0247, 0, 0x1090, 0, 0x10c5,
    0, 0x10fa, 0, 0x112f, 0, 0x1164, 0, 0x1199, 0, 0x0247, 0, 0x11ce, 0, 0x1203, 0, 0x1238,
    0, 0x126d, 0, 0x12a2, 0, 0x12d7, 0, 0x130c, 0, 0x1341, 0, 0x1376, 0, 0x13ab, 0, 0x13e0,
    0, 0x1415, 0, 0x144a, 0, 0x147f, 0, 0x14b4, 0, 0x14e9, 0, 0x151e, 0, 0x1553, 0, 0x1588,
    0, 0x0247, 0, 0x0247, 0, 0x15bd, 0, 0x15f2, 0, 0x1627, 0, 0x165c, 0, 0x1691, 0, 0x16c6,
    0, 0x16fb, 0, 0x1730, 0, 0x1765, 0, 0x179a, 0, 0x17cf, 0, 0x1804, 0, 0x07a9, 0, 0x1839,
    0, 0x186e, 0, 0x18a3, 0, 0x18d8, 0, 0x190d, 0, 0x1942, 0, 0x1977, 0, 0x091c, 0, 0x19ac,
    0, 0x19e1, 0, 0x1977, 0, 0x1a16, 0, 0x1977, 0, 159, 0, 0x1a4b, 0, 0x1a80, 0, 0x1ab5,
    0, 0x1aea, 0, 159, 0, 159, 0, 0x0b63, 0, 0x0b98, 0, 0x0bcd, 0, 0x1b1f, 0, 0x1b54,
    0, 0x0247, 0, 0x1b89, 0, 0x1bbe, 0, 0x1bf3, 0, 0x1c28, 0, 0x1c5d, 0, 0x1c92, 0, 0x1cc7,
    0, 0x0247, 0, 0x1cfc, 0, 0x1d31, 0, 0x1d66, 0, 0x1d9b, 0, 0x1dd0, 0, 0x0247, 0, 0x1e05,
    0, 0x0247, 0, 0x1e3a, 0, 0x0247, 0, 0x1e6f, 0, 0x1ea4, 0, 0x1ed9, 0, 0x1f0e, 0, 0x0247,
    0, 0x0247, 0, 0x1f43, 0, 0x0247, 0, 0x1f78, 0, 0x1fad, 0, 0x1fe2, 0, 0x2017, 0, 0x204c,
    0, 0x2081, 0, 0x20b6, 0, 0x0247, 0, 0x20eb, 0, 0x2120, 0, 0x2155, 0, 0x218a, 0, 0x21bf,
    0, 0x21f4, 0, 0x2229, 0, 0x225e, 0, 0x2293, 0, 0x22c8, 0, 0x22fd, 0, 0x2332, 0, 0x2367,
    0, 0x239c, 0, 0x23d1, 0, 0x0247, 0, 0x2406, 0, 0x0247, 0, 0x243b, 0, 0x2470, 0, 0x24a5,
    0, 0x24da, 0, 0x250f, 0, 0x2544, 0, 0x0247, 0, 0x2579, 0, 0x0247, 0, 0x25ae, 0, 0x25e3,
    0, 0x2618, 0, 0x264d, 0, 0x2682, 0, 0x26b7, 0, 0x26ec, 0, 0x2721, 0, 0x2756, 0, 0x278b,
    0, 0x27c0, 0, 0x27f5, 0, 0x282a, 0, 0x285f, 0, 0x2894, 0, 0x28c9, 0, 0x28fe, 0, 0x0247,
    0, 0x2933, 0, 0x091c, 0, 0x2968, 0, 0x091c, 0, 0x299d, 0, 0x29d2, 0, 0x2a07, 0, 0x1b54,
    0, 0x2a3c, 0, 0x2a71, 0, 0x0247, 0, 0x2aa6, 0, 0x2adb, 0, 0x2b10, 0, 0x0247, 0, 0x2b45,
    0, 0x2b7a, 0, 0x2baf, 0, 0x2be4, 0, 0x2c19, 0, 0x2c4e, 0, 0x2c83, 0, 0x2cb8, 0, 0x2ced,
    0, 0x2d22, 0, 0x2d57, 0, 0x2d8c, 0, 0x2dc1, 0, 0x2df6, 0, 0x2e2b, 0, 0x2e60, 0, 0x2e95,
    0, 0x2eca, 0, 0x0247, 0, 0x2eff, 0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x2f34,
    0, 0x2f69, 0, 0x2f9e, 0, 0x2fd3, 0, 0x3008, 0, 0x303d, 0, 0x0247, 0, 0x3072, 0, 0x30a7,
    0, 0x30dc, 0, 0x3111, 0, 0x0247, 0, 0x0247, 0, 0x3146, 0, 0x317b, 0, 0x31b0, 0, 0x31e5,
    0, 0x321a, 0, 0x324f, 0, 0x3284, 0, 0x32b9, 0, 0x0247, 0, 0x32ee, 0, 0x3323, 0, 0x3358,
    0, 0x338d, 0, 0x33c2, 0, 0x33f7, 0, 0x342c, 0, 0x3461, 0, 0x3496, 0, 0x34cb, 0, 0x3500,
    0, 0x3535, 0, 0x356a, 0, 0x359f, 0, 0x35d4, 0, 0x3609, 0, 0x363e, 0, 0x0247, 0, 0x3673,
    0, 0x36a8, 0, 0x36dd, 0, 0x3712, 0, 0x3747, 0, 0x377c, 0, 0x37b1, 0, 0x37e6, 0, 0x381b,
    0, 0x3850, 0, 0x3885, 0, 0x0247, 0, 0x0247, 0, 0x38ba, 0, 0x38ef, 0, 0x3924, 0, 0x3959,
    0, 0x398e, 0, 0x39c3, 0, 0x39f8, 0, 0x0247, 0, 0x0247, 0, 0x3a2d, 0, 0x0247, 0, 0x3a62,
    0, 0x3a97, 0, 0x3acc, 0, 0x3b01, 0, 0x3b36, 0, 0x3b6b, 0, 0x3ba0, 0, 0x3bd5, 0, 0x0247,
    0, 0x0247, 0, 0x3c0a, 0, 0x3c3f, 0, 0x3c74, 0, 0x3ca9, 0, 0x3cde, 0, 0x3d13, 0, 0x3d48,
    0, 0x3d7d, 0, 0x3db2, 0, 0x0247, 0, 0x3de7, 0, 0x3e1c, 0, 0x3e51, 0, 0x3e86, 0, 0x3ebb,
    0, 0x3ef0, 0, 0x3f25, 0, 0x3f5a, 0, 0x3f8f, 0, 0x3fc4, 0, 0x3ff9, 0, 0x402e, 0, 0x4063,
    0, 0x4098, 0, 0x0247, 0, 0x0247, 0, 0x40cd, 0, 0x4102, 0, 0x4137, 0, 0x416c, 0, 0x41a1,
    0, 0x0247, 0, 0x41d6, 0, 0x420b, 0, 0x4240, 0, 0x4275, 0, 0x0247, 0, 0x0247, 0, 0x42aa,
    0, 0x0247, 0, 0x42df, 0, 0x4314, 0, 0x4349, 0, 0x437e, 0, 0x0247, 0, 0x43b3, 0, 0x43e8,
    0, 0x0247, 0, 0x441d, 0, 0x4452, 0, 0x4487, 0, 0x44bc, 0, 0x44f1, 0, 0x4526, 0, 0x455b,
    0, 0x0247, 0, 0x4590, 0, 0x0247, 0, 0x45c5, 0, 0x45fa, 0, 0x462f, 0, 0x4664, 0, 0x4699,
    0, 0x0247, 0, 0x46ce, 0, 0x4703, 0, 0x4738, 0, 0x0247, 0, 0x476d, 0, 0x47a2, 0, 0x47d7,
    0, 0x480c, 0, 0x4841, 0, 0x4876, 0, 0x48ab, 0, 0x0247, 0, 0x48e0, 0, 0x0247, 0, 0x4915,
    0, 0x494a, 0, 0x0247, 0, 0x497f, 0, 0x49b4, 0, 0x49e9, 0, 0x0247, 0, 0x4a1e, 0, 0x4a53,
    0, 0x0247, 0, 0x4a88, 0, 0x4abd, 0, 0x4af2, 0, 0x4b27, 0, 0x4b5c, 0, 0x4b91, 0, 0x4bc6,
    0, 0x0247, 0, 0x4bfb, 0, 0x4c30, 0, 0x0247, 0, 0x0247, 0, 0x4c65, 0, 0x4c9a, 0, 0x4ccf,
    0, 0x4d04, 0, 0x0247, 0, 0x4d39, 0, 0x4d6e, 0, 0x4da3, 0, 0x4dd8, 0, 0x0247, 0, 0x4e0d,
    0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x4e42, 0, 0x0247, 0, 0x0247, 0, 0x0247,
    0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x4e77, 0, 0x0247, 0, 0x4eac, 0, 0x0247, 0, 0x4ee1,
    0, 0x0247, 0, 0x4f16, 0, 0x4f4b, 0, 0x4f80, 0, 0x4fb5, 0, 0x4fea, 0, 0x501f, 0, 0x5054,
    0, 0x0247, 0, 0x5089, 0, 0x50be, 0, 0x50f3, 0, 0x0247, 0, 0x5128, 0, 0x515d, 0, 0x5192,
    0, 0x51c7, 0, 0x0247, 0, 0x51fc, 0, 0x5231, 0, 0x0247, 0, 0x5266, 0, 0x0247, 0, 0x529b,
    0, 0x0247, 0, 0x0247, 0, 0x0247, 0, 0x52d0, 0, 0x5305, 0, 0x533a, 0, 0x536f, 0, 0x0247,
    0, 0x0247, 0, 0x53a4, 0, 0x53d9, 0, 0x0247, 0, 0x540e, 0, 0x5443, 0, 0x0247, 0, 0x0247,
    0, 0x5478, 0, 0x54ad, 0, 0x0247, 0, 0x54e2, 0, 0x5517, 0, 0x554c, 0, 0x5581, 0, 0x55b6,
    0, 0x55eb, 0, 0x0247, 0, 0x0247, 0, 0x0247, 0 };

  private static int [] ScannerUnpackRowMap() {
    int [] result = new int[540];
    int offset = 0;
    offset = ScannerUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int ScannerUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 2, 4, 1, 10,
    1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18,
    1, 19, 1, 12, 1, 20, 1, 21, 1, 12, 1, 22, 1, 23, 1, 24,
    1, 25, 1, 12, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31,
    1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 15,
    1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 5, 15,
    1, 46, 1, 47, 1, 48, 1, 46, 1, 49, 1, 46, 1, 50, 1, 46,
    1, 51, 3, 46, 1, 52, 2, 46, 1, 53, 3, 46, 1, 54, 33, 46,
    1, 55, 1, 56, 1, 57, 1, 55, 1, 58, 3, 55, 1, 59, 1, 60,
    1, 61, 4, 55, 1, 62, 3, 55, 1, 63, 33, 55, 55, 0, 1, 6,
    53, 0, 1, 7, 49, 0, 5, 64, 1, 65, 1, 64, 1, 66, 45, 64,
    12, 0, 1, 67, 1, 0, 1, 67, 2, 0, 1, 67, 11, 0, 2, 67,
    6, 0, 1, 67, 1, 0, 1, 67, 21, 0, 1, 68, 54, 0, 1, 69,
    42, 0, 2, 70, 1, 0, 9, 70, 1, 71, 3, 70, 1, 72, 1, 73,
    35, 70, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 24, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 74, 2, 15, 1, 75, 1, 15,
    1, 76, 8, 15, 1, 77, 9, 15, 5, 0, 1, 78, 6, 0, 1, 79,
    52, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 80, 4, 15,
    1, 81, 8, 15, 1, 82, 5, 15, 19, 83, 1, 84, 33, 83, 21, 0,
    1, 85, 52, 0, 1, 86, 1, 0, 1, 87, 50, 0, 1, 88, 43, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 15, 1, 89, 1, 90, 4, 15,
    1, 91, 1, 15, 1, 92, 14, 15, 12, 0, 3, 15, 2, 0, 1, 93,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 94, 11, 0, 1, 95,
    5, 15, 1, 96, 13, 15, 1, 97, 3, 15, 12, 0, 2, 15, 1, 98,
    2, 0, 1, 15, 11, 0, 1, 15, 1, 99, 3, 15, 1, 100, 1, 15,
    1, 101, 1, 15, 1, 102, 6, 15, 1, 103, 7, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 1, 104, 2, 15, 1, 105, 10, 15, 1, 106,
    9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 107,
    6, 15, 1, 108, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    3, 15, 1, 109, 3, 15, 1, 110, 3, 15, 1, 111, 8, 15, 1, 112,
    3, 15, 12, 0, 3, 15, 2, 0, 1, 113, 11, 0, 24, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 114, 2, 15, 1, 115, 1, 116,
    5, 15, 1, 117, 13, 15, 12, 0, 3, 15, 2, 0, 1, 118, 11, 0,
    1, 119, 2, 15, 1, 120, 10, 15, 1, 121, 9, 15, 12, 0, 3, 15,
    2, 0, 1, 122, 11, 0, 3, 15, 1, 123, 7, 15, 1, 124, 2, 15,
    1, 125, 9, 15, 12, 0, 3, 15, 2, 0, 1, 126, 11, 0, 3, 15,
    1, 127, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 128, 20, 15, 12, 0, 2, 15, 1, 129, 2, 0, 1, 15, 11, 0,
    2, 15, 1, 130, 6, 15, 1, 131, 2, 15, 1, 132, 11, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 133, 3, 15, 1, 134, 1, 135,
    1, 15, 1, 136, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 137, 13, 15, 1, 138, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 139, 6, 15, 1, 140, 5, 15, 1, 141, 3, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15, 1, 142, 20, 15,
    6, 46, 1, 0, 48, 46, 1, 48, 3, 46, 1, 0, 46, 46, 5, 143,
    1, 144, 1, 64, 1, 145, 45, 143, 6, 46, 1, 0, 1, 46, 1, 146,
    50, 46, 1, 70, 5, 46, 1, 52, 45, 46, 1, 147, 1, 0, 5, 46,
    1, 148, 40, 46, 6, 54, 1, 83, 12, 54, 1, 149, 33, 54, 10, 55,
    1, 150, 44, 55, 1, 57, 7, 55, 1, 150, 42, 55, 5, 151, 1, 152,
    1, 151, 1, 153, 2, 151, 1, 154, 42, 151, 8, 55, 1, 155, 1, 55,
    1, 150, 52, 55, 1, 156, 52, 55, 1, 150, 1, 157, 46, 55, 1, 158,
    4, 55, 1, 150, 1, 55, 1, 159, 40, 55, 10, 63, 1, 160, 8, 63,
    1, 161, 33, 63, 6, 65, 1, 162, 46, 65, 6, 66, 1, 163, 46, 66,
    1, 68, 2, 0, 50, 68, 12, 0, 1, 164, 40, 0, 2, 70, 1, 0,
    9, 70, 1, 165, 3, 70, 1, 72, 1, 73, 35, 70, 12, 0, 1, 166,
    4, 0, 1, 167, 47, 0, 1, 164, 5, 0, 1, 168, 46, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 7, 15, 1, 169, 16, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 7, 15, 1, 170, 16, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 9, 15, 1, 171, 14, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 172, 4, 15, 1, 173, 14, 15,
    12, 0, 1, 174, 1, 0, 1, 174, 2, 0, 1, 174, 11, 0, 2, 174,
    6, 0, 1, 174, 1, 0, 1, 174, 25, 0, 1, 79, 2, 0, 1, 175,
    3, 0, 1, 83, 45, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15,
    1, 176, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15,
    1, 177, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 178, 1, 15, 1, 179, 6, 15, 1, 180, 8, 15, 15, 0, 1, 181,
    3, 0, 1, 83, 45, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15,
    1, 182, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 12, 15,
    1, 183, 11, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 184, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15,
    1, 185, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 13, 15,
    1, 186, 10, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 187, 17, 15, 12, 0, 2, 15, 1, 188, 2, 0, 1, 15, 11, 0,
    24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15, 1, 189,
    3, 15, 1, 190, 2, 15, 1, 191, 13, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 4, 15, 1, 192, 2, 15, 1, 193, 16, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 21, 15, 1, 194, 2, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 195, 17, 15, 12, 0,
    3, 15, 2, 0, 1, 196, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 1, 15, 1, 197, 22, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 8, 15, 1, 198, 15, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 1, 15, 1, 199, 22, 15, 12, 0, 3, 15, 2, 0,
    1, 200, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    6, 15, 1, 201, 7, 15, 1, 202, 9, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 11, 15, 1, 203, 12, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 15, 15, 1, 204, 8, 15, 12, 0, 3, 15, 2, 0,
    1, 205, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 206, 1, 15, 1, 207, 5, 15, 1, 208, 4, 15, 1, 209, 1, 210,
    1, 211, 7, 15, 1, 212, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    2, 15, 1, 213, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    9, 15, 1, 214, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 215, 23, 15, 12, 0, 3, 15, 2, 0, 1, 216, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 217, 23, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 12, 15, 1, 218, 11, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 219, 3, 15, 1, 220,
    13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 221,
    19, 15, 12, 0, 2, 15, 1, 222, 2, 0, 1, 15, 11, 0, 2, 15,
    1, 223, 12, 15, 1, 224, 8, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 17, 15, 1, 225, 6, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 9, 15, 1, 226, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 2, 15, 1, 227, 13, 15, 1, 228, 7, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 2, 15, 1, 229, 21, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 10, 15, 1, 230, 13, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 231, 17, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 232, 3, 15, 1, 233, 3, 15,
    1, 234, 5, 15, 1, 235, 3, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 15, 15, 1, 236, 8, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 2, 15, 1, 237, 5, 15, 1, 238, 15, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 1, 239, 23, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 1, 15, 1, 240, 22, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 3, 15, 1, 241, 10, 15, 1, 242, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 243, 16, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 244, 16, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 245, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 246, 17, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 247, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 248, 16, 15, 6, 144,
    1, 162, 46, 144, 6, 145, 1, 163, 46, 145, 1, 146, 2, 46, 3, 146,
    1, 68, 46, 146, 6, 46, 1, 0, 5, 46, 1, 249, 1, 46, 1, 249,
    2, 46, 1, 249, 11, 46, 2, 249, 6, 46, 1, 249, 1, 46, 1, 249,
    19, 46, 1, 0, 5, 46, 1, 148, 2, 46, 1, 53, 3, 46, 1, 54,
    39, 46, 1, 0, 8, 46, 1, 53, 3, 46, 1, 54, 33, 46, 10, 55,
    1, 150, 1, 0, 41, 55, 6, 152, 1, 250, 3, 152, 1, 251, 42, 152,
    6, 153, 1, 252, 3, 153, 1, 253, 42, 153, 1, 155, 2, 55, 7, 155,
    1, 254, 42, 155, 10, 55, 1, 150, 1, 55, 1, 255, 1, 55, 1, 255,
    2, 55, 1, 255, 11, 55, 2, 255, 6, 55, 1, 255, 1, 55, 1, 255,
    23, 55, 1, 150, 1, 55, 1, 159, 2, 55, 1, 62, 3, 55, 1, 63,
    33, 55, 10, 63, 1, 160, 1, 83, 7, 63, 1, 161, 33, 63, 10, 55,
    1, 150, 4, 55, 1, 62, 3, 55, 1, 63, 33, 55, 12, 0, 1, 0x0100,
    5, 0, 1, 168, 46, 0, 1, 0x0100, 52, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 17, 15, 1, 0x0101, 6, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 8, 15, 1, 0x0102, 15, 15, 12, 0, 3, 15, 2, 0, 1, 0x0103,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0104,
    23, 15, 12, 0, 1, 174, 1, 0, 1, 174, 1, 175, 1, 0, 1, 174,
    1, 0, 1, 83, 9, 0, 2, 174, 6, 0, 1, 174, 1, 0, 1, 174,
    18, 0, 1, 0x0105, 6, 0, 1, 0x0106, 52, 0, 3, 15, 2, 0, 1, 0x0107,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 0x0108, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 0x0109, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 3, 15, 1, 0x010a, 20, 15, 5, 0, 1, 0x010b,
    6, 0, 1, 0x010c, 52, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x010d, 2, 15, 1, 0x010e, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 1, 0x010f, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    14, 15, 1, 0x0110, 9, 15, 12, 0, 3, 15, 2, 0, 1, 0x0111, 11, 0,
    24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x0112,
    16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x0113,
    9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x0114,
    15, 15, 12, 0, 3, 15, 2, 0, 1, 0x0115, 11, 0, 24, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x0116, 16, 15, 12, 0,
    3, 15, 2, 0, 1, 0x0117, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 1, 0x0118, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x0119, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 2, 15, 1, 0x011a, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 14, 15, 1, 0x011b, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 6, 15, 1, 0x011c, 17, 15, 12, 0, 3, 15, 2, 0, 1, 0x011d,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x011e, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15,
    1, 0x011f, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0120, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0121, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x0122, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x0123, 14, 15, 12, 0, 3, 15, 2, 0, 1, 0x0124, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x0125, 18, 15,
    12, 0, 3, 15, 2, 0, 1, 0x0126, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 2, 15, 1, 0x0127, 3, 15, 1, 0x0128, 17, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x0129, 21, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x012a, 15, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x012b, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 0x012c, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 0x012d, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 1, 0x012e, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    6, 15, 1, 0x012f, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    7, 15, 1, 0x0130, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    9, 15, 1, 0x0131, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 0x0132, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 15, 15,
    1, 0x0133, 8, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15,
    1, 0x0134, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0135, 20, 15, 12, 0, 3, 15, 2, 0, 1, 0x0136, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 0x0137, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0138, 17, 15, 12, 0, 3, 15,
    2, 0, 1, 0x0139, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 4, 15, 1, 0x013a, 19, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 8, 15, 1, 0x013b, 15, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 22, 15, 1, 0x013c, 1, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 6, 15, 1, 0x013d, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 4, 15, 1, 0x013e, 19, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 6, 15, 1, 0x013f, 1, 15, 1, 0x0140, 4, 15, 1, 0x0141, 1, 15,
    1, 0x0142, 8, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 16, 15,
    1, 0x0143, 7, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0144,
    23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0145,
    17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0146,
    17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 20, 15, 1, 0x0147,
    3, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x0148,
    19, 15, 6, 46, 1, 0, 5, 46, 1, 249, 1, 46, 1, 249, 1, 53,
    1, 46, 1, 249, 1, 46, 1, 54, 9, 46, 2, 249, 6, 46, 1, 249,
    1, 46, 1, 249, 13, 46, 6, 152, 1, 250, 3, 152, 1, 251, 1, 65,
    41, 152, 6, 153, 1, 252, 3, 153, 1, 253, 1, 66, 41, 153, 1, 155,
    2, 55, 7, 155, 1, 254, 1, 68, 41, 155, 10, 55, 1, 150, 1, 55,
    1, 255, 1, 55, 1, 255, 1, 62, 1, 55, 1, 255, 1, 55, 1, 63,
    9, 55, 2, 255, 6, 55, 1, 255, 1, 55, 1, 255, 13, 55, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0149, 23, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 0x014a, 17, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 0x014b, 19, 15, 12, 0, 1, 0x014c,
    1, 0, 1, 0x014c, 2, 0, 1, 0x014c, 11, 0, 2, 0x014c, 6, 0, 1, 0x014c,
    1, 0, 1, 0x014c, 25, 0, 1, 0x0106, 2, 0, 1, 175, 3, 0, 1, 83,
    45, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x014d, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 15, 15, 1, 0x014e, 8, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x014f, 16, 15,
    12, 0, 1, 0x0150, 1, 0, 1, 0x0150, 2, 0, 1, 0x0150, 11, 0, 2, 0x0150,
    6, 0, 1, 0x0150, 1, 0, 1, 0x0150, 25, 0, 1, 0x010c, 2, 0, 1, 181,
    3, 0, 1, 83, 45, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15,
    1, 0x0151, 19, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x0152, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 11, 15,
    1, 0x0153, 12, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x0154, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15,
    1, 0x0155, 15, 15, 12, 0, 3, 15, 2, 0, 1, 0x0156, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15, 1, 0x0157, 14, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0158, 23, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x0159, 15, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x015a, 2, 15, 1, 0x015b,
    16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x015c,
    19, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x015d,
    19, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x015e, 23, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x015f, 19, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x0160, 18, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x0161, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x0162, 21, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0163, 17, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0164, 23, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x0165, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0166, 17, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0167, 23, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 2, 15, 1, 0x0168, 21, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 0x0169, 19, 15, 12, 0, 2, 15,
    1, 0x016a, 2, 0, 1, 15, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 5, 15, 1, 0x016b, 18, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 7, 15, 1, 0x016c, 16, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 14, 15, 1, 0x016d, 9, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 6, 15, 1, 0x016e, 17, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 12, 15, 1, 0x016f, 11, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 14, 15, 1, 0x0170, 9, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 1, 0x0171, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x0172, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 18, 15, 1, 0x0173, 5, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 14, 15, 1, 0x0174, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x0175, 16, 15, 12, 0, 3, 15, 2, 0, 1, 0x0176,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0177,
    23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x0178, 23, 15,
    12, 0, 2, 15, 1, 0x0179, 2, 0, 1, 15, 11, 0, 24, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x017a, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 0x017b, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0,
    1, 0x017c, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    7, 15, 1, 0x017d, 16, 15, 12, 0, 3, 15, 2, 0, 1, 0x017e, 11, 0,
    24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x017f, 23, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x0180, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x0181, 18, 15,
    12, 0, 3, 15, 2, 0, 1, 0x0182, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 0x0183, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x0184, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 14, 15, 1, 0x0185, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 4, 15, 1, 0x0186, 9, 15, 1, 0x0187, 9, 15, 12, 0, 1, 0x014c,
    1, 0, 1, 0x014c, 1, 175, 1, 0, 1, 0x014c, 1, 0, 1, 83, 9, 0,
    2, 0x014c, 6, 0, 1, 0x014c, 1, 0, 1, 0x014c, 25, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 9, 15, 1, 0x0188, 14, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 6, 15, 1, 0x0189, 17, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 6, 15, 1, 0x018a, 17, 15, 12, 0, 1, 0x0150, 1, 0,
    1, 0x0150, 1, 181, 1, 0, 1, 0x0150, 1, 0, 1, 83, 9, 0, 2, 0x0150,
    6, 0, 1, 0x0150, 1, 0, 1, 0x0150, 25, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 5, 15, 1, 0x018b, 18, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 1, 0x018c, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 0x018d, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15,
    1, 0x018e, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 13, 15,
    1, 0x018f, 10, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15,
    1, 0x0190, 19, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x0191, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0192, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x0193, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x0194, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x0195, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15,
    1, 0x0196, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x0197, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x0198, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x0199, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x019a, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x019b, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x019c, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x019d,
    23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x019e,
    19, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x019f,
    18, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01a0,
    15, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15, 1, 0x01a1,
    20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x01a2,
    9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15, 1, 0x01a3,
    13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 13, 15, 1, 0x01a4,
    10, 15, 12, 0, 2, 15, 1, 0x01a5, 2, 0, 1, 15, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01a6, 23, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x01a7, 9, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 12, 15, 1, 0x01a8, 11, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01a9, 19, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 13, 15, 1, 0x01aa, 10, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 3, 15, 1, 0x01ab, 20, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x01ac, 5, 15, 1, 0x01ad,
    15, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01ae,
    15, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15, 1, 0x01af,
    13, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01b0, 23, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x01b1, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01b2, 17, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 13, 15, 1, 0x01b3, 10, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01b4, 23, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 10, 15, 1, 0x01b5, 13, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 3, 15, 1, 0x01b6, 20, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 11, 15, 1, 0x01b7, 12, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 19, 15, 1, 0x01b8, 4, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01b9, 23, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 2, 15, 1, 0x01ba, 21, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01bb, 17, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01bc, 15, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01bd, 19, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01be, 19, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 1, 0x01bf, 23, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 10, 15, 1, 0x01c0, 13, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 11, 15, 1, 0x01c1, 12, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 8, 15, 1, 0x01c2, 15, 15, 12, 0, 3, 15, 2, 0,
    1, 0x01c3, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    3, 15, 1, 0x01c4, 20, 15, 12, 0, 3, 15, 2, 0, 1, 0x01c5, 11, 0,
    24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x01c6,
    18, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15, 1, 0x01c7,
    14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x01c8,
    18, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01c9,
    17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01ca,
    15, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01cb, 23, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01cc, 15, 15,
    12, 0, 3, 15, 2, 0, 1, 0x01cd, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 1, 0x01ce, 23, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 4, 15, 1, 0x01cf, 19, 15, 12, 0, 3, 15, 2, 0,
    1, 15, 11, 0, 6, 15, 1, 0x01d0, 17, 15, 12, 0, 3, 15, 2, 0,
    1, 0x01d1, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 0x01d2, 11, 0,
    24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x01d3,
    16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 20, 15, 1, 0x01d4,
    3, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01d5,
    17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15, 1, 0x01d6,
    18, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 12, 15, 1, 0x01d7,
    11, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01d8,
    17, 15, 12, 0, 3, 15, 2, 0, 1, 0x01d9, 11, 0, 24, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x01da, 21, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01db, 19, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 9, 15, 1, 0x01dc, 14, 15, 12, 0,
    3, 15, 2, 0, 1, 15, 11, 0, 1, 0x01dd, 23, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01de, 19, 15, 12, 0, 3, 15,
    2, 0, 1, 0x01df, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 6, 15, 1, 0x01e0, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 4, 15, 1, 0x01e1, 19, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 10, 15, 1, 0x01e2, 13, 15, 12, 0, 3, 15, 2, 0, 1, 0x01e3,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 0x01e4, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15, 1, 0x01e5, 16, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 10, 15, 1, 0x01e6, 13, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x01e7, 21, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01e8, 15, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15, 1, 0x01e9, 21, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 4, 15, 1, 0x01ea, 19, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01eb, 17, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15, 1, 0x01ec, 17, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 8, 15, 1, 0x01ed, 15, 15,
    12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15, 1, 0x01ee, 9, 15,
    12, 0, 3, 15, 2, 0, 1, 0x01ef, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 9, 15, 1, 0x01f0, 14, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 12, 15, 1, 0x01f1, 11, 15, 12, 0, 3, 15,
    2, 0, 1, 0x01f2, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 0x01f3,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x01f4, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 11, 15,
    1, 0x01f5, 12, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x01f6, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 2, 15,
    1, 0x01f7, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 5, 15,
    1, 0x01f8, 18, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x01f9, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x01fa, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x01fb, 20, 15, 12, 0, 3, 15, 2, 0, 1, 0x01fc, 11, 0, 24, 15,
    12, 0, 3, 15, 2, 0, 1, 0x01fd, 11, 0, 24, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 19, 15, 1, 0x01fe, 4, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 10, 15, 1, 0x01ff, 13, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 6, 15, 1, 0x0200, 17, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 10, 15, 1, 0x0201, 13, 15, 12, 0, 3, 15,
    2, 0, 1, 15, 11, 0, 10, 15, 1, 0x0202, 13, 15, 12, 0, 3, 15,
    2, 0, 1, 0x0203, 11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 14, 15, 1, 0x0204, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 6, 15, 1, 0x0205, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 8, 15, 1, 0x0206, 15, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 3, 15, 1, 0x0207, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x0208, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 10, 15, 1, 0x0209, 13, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 1, 0x020a, 23, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0,
    1, 0x020b, 1, 15, 1, 0x020c, 21, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 3, 15, 1, 0x020d, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15,
    11, 0, 7, 15, 1, 0x020e, 16, 15, 12, 0, 3, 15, 2, 0, 1, 0x020f,
    11, 0, 24, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 7, 15,
    1, 0x0210, 16, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x0211, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 6, 15,
    1, 0x0212, 17, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x0213, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x0214, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x0215, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 14, 15,
    1, 0x0216, 9, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x0217, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0218, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 3, 15,
    1, 0x0219, 20, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 13, 15,
    1, 0x021a, 10, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x021b, 14, 15, 12, 0, 3, 15, 2, 0, 1, 15, 11, 0, 9, 15,
    1, 0x021c, 14, 15, 0 };

  private static int [] ScannerUnpackTrans() {
    int [] result = new int[22048];
    int offset = 0;
    offset = ScannerUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int ScannerUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    1, 0, 2, 1, 1, 9, 1, 1, 1, 9, 5, 1, 2, 9, 4, 1,
    1, 9, 5, 1, 4, 9, 22, 1, 1, 9, 13, 1, 1, 9, 2, 0,
    2, 1, 1, 9, 4, 0, 4, 1, 1, 0, 4, 1, 1, 0, 1, 1,
    4, 9, 61, 1, 1, 0, 6, 1, 1, 9, 2, 1, 1, 0, 1, 1,
    2, 9, 3, 1, 2, 0, 6, 1, 1, 0, 5, 1, 1, 0, 69, 1,
    1, 0, 1, 1, 1, 0, 7, 1, 2, 0, 4, 1, 1, 0, 64, 1,
    1, 0, 208, 1, 0 };

  private static int [] ScannerUnpackAttribute() {
    int [] result = new int[540];
    int offset = 0;
    offset = ScannerUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int ScannerUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader FReader;

  /** the current state of the DFA */
  private int FState;

  /** the current lexical state */
  private int FLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] FBuffer = new char[SCANNER_BufferSize];

  /** the textposition at the last accepting state */
  private int FMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int FPushbackPos;

  /** the current text position in the buffer */
  private int FCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
  
  private bool zzAtBOL = true;
    */
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private System.Collections.Stack zzStreams = new System.Collections.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private sealed class FlexStreamInfo {
    public System.IO.TextReader FReader;
    public int zzEndRead;
    public int zzStartRead;
    public int FCurrentPos;
    public int FMarkedPos;
    public int FPushbackPos;
    public int yyline;
    public int yycolumn;
    public char [] FBuffer;
    public bool zzAtEOF;

    /** sets all values stored in this class */
    public FlexStreamInfo(System.IO.TextReader FReader, int zzEndRead, int zzStartRead,
                  int FCurrentPos, int FMarkedPos, int FPushbackPos,
                  char [] FBuffer, bool zzAtEOF, int yyline, int yycolumn) {
      this.FReader      = FReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.FCurrentPos  = FCurrentPos;
      this.FMarkedPos   = FMarkedPos;
      this.FPushbackPos = FPushbackPos;
      this.FBuffer      = FBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */
    #region IScanner Members

    public const int UNKNOWN_Char = -1;
	public const int KEYWORD_absolute = 2000;
	public const int KEYWORD_abstract = KEYWORD_absolute + 1;
	public const int KEYWORD_and = KEYWORD_abstract + 1;
	public const int KEYWORD_array = KEYWORD_and + 1;
	
	public const int KEYWORD_as = KEYWORD_array + 1;
	public const int KEYWORD_asm = KEYWORD_as + 1;
	public const int KEYWORD_begin = KEYWORD_asm + 1;
	public const int KEYWORD_case = KEYWORD_begin + 1;
	public const int KEYWORD_cdecl = KEYWORD_case + 1;
	public const int KEYWORD_class = KEYWORD_cdecl + 1;
	public const int KEYWORD_const = KEYWORD_class + 1;
	public const int KEYWORD_constructor = KEYWORD_const + 1;
	public const int KEYWORD_contains = KEYWORD_constructor + 1;
	public const int KEYWORD_default = KEYWORD_contains + 1;
	public const int KEYWORD_depricated = KEYWORD_default + 1;
	public const int KEYWORD_destructor = KEYWORD_depricated + 1;
	public const int KEYWORD_dispid = KEYWORD_destructor + 1;
	public const int KEYWORD_div = KEYWORD_dispid + 1;
	public const int KEYWORD_do = KEYWORD_div + 1;
	public const int KEYWORD_downto = KEYWORD_do + 1;
	public const int KEYWORD_dynamic = KEYWORD_downto + 1;
	public const int KEYWORD_else = KEYWORD_dynamic + 1;
	public const int KEYWORD_end = KEYWORD_else + 1;
	public const int KEYWORD_except = KEYWORD_end + 1;
	public const int KEYWORD_export = KEYWORD_except + 1;
	public const int KEYWORD_exports = KEYWORD_export + 1;
	public const int KEYWORD_external = KEYWORD_exports + 1;
	public const int KEYWORD_far = KEYWORD_external + 1;
	public const int KEYWORD_file = KEYWORD_far + 1;
	public const int KEYWORD_finalization = KEYWORD_file + 1;
	public const int KEYWORD_finally = KEYWORD_finalization + 1;
	public const int KEYWORD_for = KEYWORD_finally + 1;
	public const int KEYWORD_forward = KEYWORD_for + 1;
	public const int KEYWORD_function = KEYWORD_forward + 1;
	public const int KEYWORD_goto = KEYWORD_function + 1;
	public const int KEYWORD_if = KEYWORD_goto + 1;
	public const int KEYWORD_implementation = KEYWORD_if + 1;
	public const int KEYWORD_implements = KEYWORD_implementation + 1;
	public const int KEYWORD_in = KEYWORD_implements + 1;
	public const int KEYWORD_index = KEYWORD_in + 1;
	public const int KEYWORD_inherited = KEYWORD_index + 1;
	public const int KEYWORD_initialization = KEYWORD_inherited + 1;
	public const int KEYWORD_interface = KEYWORD_initialization + 1;
	public const int KEYWORD_is = KEYWORD_interface + 1;
	public const int KEYWORD_label = KEYWORD_is + 1;
	public const int KEYWORD_library = KEYWORD_label + 1;
	public const int KEYWORD_local = KEYWORD_library + 1;
	public const int KEYWORD_message = KEYWORD_local + 1;
	public const int KEYWORD_mod = KEYWORD_message + 1;
	public const int KEYWORD_name = KEYWORD_mod + 1;
	public const int KEYWORD_near = KEYWORD_name + 1;
	public const int KEYWORD_nil = KEYWORD_near + 1;
	public const int KEYWORD_nodefault = KEYWORD_nil + 1;
	public const int KEYWORD_not = KEYWORD_nodefault + 1;
	public const int KEYWORD_object = KEYWORD_not + 1;
	public const int KEYWORD_of = KEYWORD_object + 1;
	public const int KEYWORD_on = KEYWORD_of + 1;
	public const int KEYWORD_or = KEYWORD_on + 1;
	public const int KEYWORD_out = KEYWORD_or + 1;
	public const int KEYWORD_overload = KEYWORD_out + 1;
	public const int KEYWORD_override = KEYWORD_overload + 1;
	public const int KEYWORD_package = KEYWORD_override + 1;
	public const int KEYWORD_pascal = KEYWORD_package + 1;
	public const int KEYWORD_platform = KEYWORD_pascal + 1;
	public const int KEYWORD_private = KEYWORD_platform + 1;
	public const int KEYWORD_procedure = KEYWORD_private + 1;
	public const int KEYWORD_program = KEYWORD_procedure + 1;
	public const int KEYWORD_property = KEYWORD_program + 1;
	public const int KEYWORD_protected = KEYWORD_property + 1;
	public const int KEYWORD_public = KEYWORD_protected + 1;
	public const int KEYWORD_published = KEYWORD_public + 1;
	public const int KEYWORD_read = KEYWORD_published + 1;
	public const int KEYWORD_record = KEYWORD_read + 1;
	public const int KEYWORD_register = KEYWORD_record + 1;
	public const int KEYWORD_reintroduce = KEYWORD_register + 1;
	public const int KEYWORD_repeat = KEYWORD_reintroduce + 1;
	public const int KEYWORD_requires = KEYWORD_repeat + 1;
	public const int KEYWORD_resourcestring = KEYWORD_requires + 1;
	public const int KEYWORD_safecall = KEYWORD_resourcestring + 1;
	public const int KEYWORD_set = KEYWORD_safecall + 1;
	public const int KEYWORD_shl = KEYWORD_set + 1;
	public const int KEYWORD_shr = KEYWORD_shl + 1;
	public const int KEYWORD_stdcall = KEYWORD_shr + 1;
	public const int KEYWORD_stored = KEYWORD_stdcall + 1;
	public const int KEYWORD_string = KEYWORD_stored + 1;
	public const int KEYWORD_then = KEYWORD_string + 1;
	public const int KEYWORD_to = KEYWORD_then + 1;
	public const int KEYWORD_try = KEYWORD_to + 1;
	public const int KEYWORD_type = KEYWORD_try + 1;
	public const int KEYWORD_unit = KEYWORD_type + 1;
	public const int KEYWORD_until = KEYWORD_unit + 1;
	public const int KEYWORD_uses = KEYWORD_until + 1;
	public const int KEYWORD_var = KEYWORD_uses + 1;
	public const int KEYWORD_varargs = KEYWORD_var + 1;
	public const int KEYWORD_virtual = KEYWORD_varargs + 1;
	public const int KEYWORD_while = KEYWORD_virtual + 1;
	public const int KEYWORD_with = KEYWORD_while + 1;
	public const int KEYWORD_write = KEYWORD_with + 1;
	public const int KEYWORD_xor = KEYWORD_write + 1;
	public const int ITEM_Comment = KEYWORD_xor + 1;
	public const int COMPILER_Directive = ITEM_Comment + 1;
	public const int COMMENT_EndofLine = COMPILER_Directive + 1;
	public const int COMMENT_CurlyBrace = COMMENT_EndofLine + 1;  
	public const int COMMENT_BraceStar = COMMENT_CurlyBrace + 1;
    public const int IDENTIFIER = COMMENT_BraceStar + 1;
    public const int DIGIT = IDENTIFIER + 1;
    public const int HEX_Number = DIGIT + 1;
    public const int CHAR_HexValue = HEX_Number + 1;
    public const int CHAR_Value = CHAR_HexValue + 1;
    public const int FLOAT = CHAR_Value + 1;
    public const int REAL = FLOAT + 1;
    public const int STRING = REAL + 1;
    public const int ASSIGNMENT = STRING + 1;
    public const int DOES_NotEqual = ASSIGNMENT + 1;
    public const int LESS_ThanOrEqual = DOES_NotEqual + 1;
    public const int GREATER_ThanOrEqual = LESS_ThanOrEqual + 1;
    public const int OPEN_Brace = GREATER_ThanOrEqual + 1;
    public const int CLOSE_Brace = OPEN_Brace + 1;
    public const int OPEN_SquareBrace = CLOSE_Brace + 1;
    public const int CLOSE_SquareBrace = OPEN_SquareBrace + 1;
    public const int PERIOD = CLOSE_SquareBrace + 1;
    public const int OPERATORS = PERIOD + 1;
    public const int DELIMITERS = OPERATORS + 1;
    public const int WHITE_Space = DELIMITERS + 1;
    public const int END_Statement = WHITE_Space + 1;
	 
	
    private TokenInfo FTokenInfo;

    public bool ScanTokenAndProvideInfoAboutIt(TokenInfo tokenInfo, ref int state)
    {
      if (zzEOFDone) return false;
      FLexicalState = state;
      FTokenInfo = tokenInfo;
      GetNextToken();
      state = this.yystate();
      return FTokenInfo.Token != -1;
    }

    public void SetSource(string source, int offset)
    {
      int lBackupState = FLexicalState;	
      zzEOFDone = false;							 
      yyreset(new StringReader(source.Substring(offset)));
      FLexicalState = lBackupState;
    }

    #endregion
    
    #region My Methods
    
  	private TokenInfo GetTokenInfo(int aAction, TokenType aTokenType)
    {
      FTokenInfo.Type = aTokenType;
      FTokenInfo.Token = aAction;
      FTokenInfo.StartIndex = FCurrentPos;
      FTokenInfo.EndIndex = FMarkedPos-1;
      switch (aTokenType) 
      {
        case TokenType.LineComment: 
        case TokenType.Comment: FTokenInfo.Color = TokenColor.Comment; break;
        case TokenType.Keyword: 
        case TokenType.Operator: 
        case TokenType.Delimiter: FTokenInfo.Color = TokenColor.Keyword; break;
        case TokenType.Literal: FTokenInfo.Color = TokenColor.Number; break;
        case TokenType.String: FTokenInfo.Color = TokenColor.String; break;
        case TokenType.Identifier: 
        case TokenType.Text: 
        case TokenType.WhiteSpace: FTokenInfo.Color = TokenColor.Text; break;
      }
      return FTokenInfo;
    }
   
    #endregion
    public DelphiScanner() : this(new StringReader(""))
    {
    }
  int FActualStart = 0;
/*  enum DelphiKeywordState { None = 0, Property = 1, Method = 2, Parameter = 4 };
  enum DelphiGoal { None, Program, Package, Library, Unit };
  DelphiKeywordState FCurrentState = DelphiKeywordState.None;
  DelphiGoal FDelphiGoal = DelphiGoal.None; */


  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal DelphiScanner(TextReader @in) {
    this.FReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal DelphiScanner(Stream @in) : this(new StreamReader(@in))
  {
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] ScannerUnpackCMap(ushort[] packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed[i++];
      char value = (char)packed[i++];
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* is the buffer big enough? */
    if (FCurrentPos >= FBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[FCurrentPos*2];
      Array.Copy(FBuffer, 0, newBuffer, 0, FBuffer.Length);
      FBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = FReader.Read(FBuffer, zzEndRead,FBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (FReader != null)
      FReader.Close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public void yypushStream(TextReader reader) {
    zzStreams.Push(
      new FlexStreamInfo(FReader, zzEndRead, zzStartRead, FCurrentPos,
                        FMarkedPos, FPushbackPos, FBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    FBuffer = new char[SCANNER_BufferSize];
    FReader = reader;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws System.InvalidOperationException
   *         if there is no further stream to read from.
   *
   * @throws System.IO.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(TextReader)
   */
  public void yypopStream() {
    FReader.Close();
    FlexStreamInfo s = (FlexStreamInfo) zzStreams.Pop();
    FBuffer      = s.FBuffer;
    FReader      = s.FReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    FCurrentPos  = s.FCurrentPos;
    FMarkedPos   = s.FMarkedPos ;
    FPushbackPos = s.FPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public bool yymoreStreams() {
    return zzStreams.Count != 0;
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(System.IO.TextReader)
   * @see #yypopStream()
   */
  public void yyreset(System.IO.TextReader reader) {
    FReader = reader;
   // zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    FLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return FLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    FLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( FBuffer, zzStartRead, FMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return FBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return FMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    FMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public TokenInfo GetNextToken() {
    int zzInput = 0;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int lCurrentPos;
      int zzMarkedPosL = FMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = FBuffer;
      char [] zzCMapL = ZZ_CMAP;

      bool zzR = false;
      for (lCurrentPos = zzStartRead; lCurrentPos < zzMarkedPosL;
                                                             lCurrentPos++) {
        switch (zzBufferL[lCurrentPos]) {
        case '\u000B':// <control> Line Tabulation char
        case '\u000C':// <control> form feed
        case '\u0085':// <control> Next Line
        case '\u2028':// Line Separator
        case '\u2029': // Paragraph Separator char
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
          break;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        bool zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          bool eof = zzRefill();
          zzMarkedPosL = FMarkedPos;
          zzBufferL = FBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      lCurrentPos = FCurrentPos = zzStartRead = zzMarkedPosL;
  
      FState = FLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!SCANNER_SpuriousWarningsSucks) goto zzForAction;
    
          if (lCurrentPos < zzEndReadL)
            zzInput = zzBufferL[lCurrentPos++];
          else if (zzAtEOF) {
            zzInput = SCANNER_Eof;
            goto zzForAction;
          }
          else {
            bool eof = zzRefill();
            zzBufferL      = FBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = SCANNER_Eof;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[lCurrentPos++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[FState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          FState = zzNext;

          int zzAttributes = zzAttrL[FState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = FState;
            zzMarkedPosL = lCurrentPos;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      FMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 630 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(DELIMITERS,TokenType.Delimiter); 
#line default
          }
          break;
        case 110: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 588 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_safecall,TokenType.Keyword); 
#line default
          }
          break;
        case 32: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 596 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_to,TokenType.Keyword); 
#line default
          }
          break;
        case 35: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 553 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_is,TokenType.Keyword); 
#line default
          }
          break;
        case 15: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 482 "..\\..\\DelphiScanner.flex"
                      /* get more */ 
#line default
          }
          break;
        case 89: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 529 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_downto,TokenType.Keyword); 
#line default
          }
          break;
        case 8: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 612 "..\\..\\DelphiScanner.flex"
            return GetTokenInfo(DIGIT,TokenType.Literal); 
#line default
          }
          break;
        case 7: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 624 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(CLOSE_Brace,TokenType.Delimiter); 
#line default
          }
          break;
        case 4: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 631 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(WHITE_Space,TokenType.WhiteSpace); 
#line default
          }
          break;
        case 104: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 603 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_varargs,TokenType.Keyword); 
#line default
          }
          break;
        case 115: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 522 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_contains,TokenType.Keyword); 
#line default
          }
          break;
        case 9: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 611 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(IDENTIFIER,TokenType.Identifier); 
#line default
          }
          break;
        case 106: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 543 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_function,TokenType.Keyword); 
#line default
          }
          break;
        case 71: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 513 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_array,TokenType.Keyword); 
#line default
          }
          break;
        case 76: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 520 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_const,TokenType.Keyword); 
#line default
          }
          break;
        case 27: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 622 "..\\..\\DelphiScanner.flex"
                          return GetTokenInfo(GREATER_ThanOrEqual,TokenType.Operator); 
#line default
          }
          break;
        case 56: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 602 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_var,TokenType.Keyword); 
#line default
          }
          break;
        case 64: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 595 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_then,TokenType.Keyword); 
#line default
          }
          break;
        case 36: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 552 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_in,TokenType.Keyword); 
#line default
          }
          break;
        case 125: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 524 "..\\..\\DelphiScanner.flex"
                         return GetTokenInfo(KEYWORD_depricated,TokenType.Keyword); 
#line default
          }
          break;
        case 60: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 531 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_else,TokenType.Keyword); 
#line default
          }
          break;
        case 69: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 544 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_goto,TokenType.Keyword); 
#line default
          }
          break;
        case 88: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 585 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_repeat,TokenType.Keyword); 
#line default
          }
          break;
        case 24: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 619 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(ASSIGNMENT,TokenType.Operator); 
#line default
          }
          break;
        case 40: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 616 "..\\..\\DelphiScanner.flex"
            return GetTokenInfo(FLOAT,TokenType.Literal); 
#line default
          }
          break;
        case 72: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 516 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_begin,TokenType.Keyword); 
#line default
          }
          break;
        case 50: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 568 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_out,TokenType.Keyword); 
#line default
          }
          break;
        case 81: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 605 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_while,TokenType.Keyword); 
#line default
          }
          break;
        case 74: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 556 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_local,TokenType.Keyword); 
#line default
          }
          break;
        case 96: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 592 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_stdcall,TokenType.Keyword); 
#line default
          }
          break;
        case 48: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 590 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_shl,TokenType.Keyword); 
#line default
          }
          break;
        case 120: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 549 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_inherited,TokenType.Keyword); 
#line default
          }
          break;
        case 1: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 483 "..\\..\\DelphiScanner.flex"
                      /*  Text Data get more */ 
#line default
          }
          break;
        case 111: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 569 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_overload,TokenType.Keyword); 
#line default
          }
          break;
        case 44: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 532 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_end,TokenType.Keyword); 
#line default
          }
          break;
        case 77: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 519 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_class,TokenType.Keyword); 
#line default
          }
          break;
        case 38: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 473 "..\\..\\DelphiScanner.flex"
                         return GetTokenInfo(COMPILER_Directive,TokenType.LineComment); 
#line default
          }
          break;
        case 19: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 613 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(HEX_Number,TokenType.Literal); 
#line default
          }
          break;
        case 129: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 539 "..\\..\\DelphiScanner.flex"
                           return GetTokenInfo(KEYWORD_finalization,TokenType.Keyword); 
#line default
          }
          break;
        case 75: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 600 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_until,TokenType.Keyword); 
#line default
          }
          break;
        case 131: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 550 "..\\..\\DelphiScanner.flex"
                             return GetTokenInfo(KEYWORD_initialization,TokenType.Keyword); 
#line default
          }
          break;
        case 20: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 474 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(COMMENT_EndofLine,TokenType.LineComment); 
#line default
          }
          break;
        case 45: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 514 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_asm,TokenType.Keyword); 
#line default
          }
          break;
        case 103: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 574 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_private,TokenType.Keyword); 
#line default
          }
          break;
        case 73: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 554 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_label,TokenType.Keyword); 
#line default
          }
          break;
        case 6: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 623 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(OPEN_Brace,TokenType.Delimiter); 
#line default
          }
          break;
        case 83: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 534 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_export,TokenType.Keyword); 
#line default
          }
          break;
        case 67: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 560 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_near,TokenType.Keyword); 
#line default
          }
          break;
        case 39: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 472 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(ITEM_Comment,TokenType.LineComment); 
#line default
          }
          break;
        case 25: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 621 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(LESS_ThanOrEqual,TokenType.Operator); 
#line default
          }
          break;
        case 124: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 525 "..\\..\\DelphiScanner.flex"
                         return GetTokenInfo(KEYWORD_destructor,TokenType.Keyword); 
#line default
          }
          break;
        case 68: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 559 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_name,TokenType.Keyword); 
#line default
          }
          break;
        case 82: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 533 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_except,TokenType.Keyword); 
#line default
          }
          break;
        case 105: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 604 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_virtual,TokenType.Keyword); 
#line default
          }
          break;
        case 49: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 591 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_shr,TokenType.Keyword); 
#line default
          }
          break;
        case 78: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 518 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_cdecl,TokenType.Keyword); 
#line default
          }
          break;
        case 119: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 551 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_interface,TokenType.Keyword); 
#line default
          }
          break;
        case 108: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 510 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_absolute,TokenType.Keyword); 
#line default
          }
          break;
        case 3: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 634 "..\\..\\DelphiScanner.flex"
         return GetTokenInfo(UNKNOWN_Char,TokenType.Unknown); 
#line default
          }
          break;
        case 113: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 583 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_register,TokenType.Keyword); 
#line default
          }
          break;
        case 42: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 541 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_for,TokenType.Keyword); 
#line default
          }
          break;
        case 23: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 618 "..\\..\\DelphiScanner.flex"
             return GetTokenInfo(STRING,TokenType.String); 
#line default
          }
          break;
        case 102: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 576 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_program,TokenType.Keyword); 
#line default
          }
          break;
        case 127: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 584 "..\\..\\DelphiScanner.flex"
                          return GetTokenInfo(KEYWORD_reintroduce,TokenType.Keyword); 
#line default
          }
          break;
        case 29: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 565 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_of,TokenType.Keyword); 
#line default
          }
          break;
        case 62: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 599 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_unit,TokenType.Keyword); 
#line default
          }
          break;
        case 47: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 589 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_set,TokenType.Keyword); 
#line default
          }
          break;
        case 28: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 515 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_as,TokenType.Keyword); 
#line default
          }
          break;
        case 10: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 627 "..\\..\\DelphiScanner.flex"
             return GetTokenInfo(PERIOD,TokenType.Delimiter); 
#line default
          }
          break;
        case 61: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 601 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_uses,TokenType.Keyword); 
#line default
          }
          break;
        case 58: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 617 "..\\..\\DelphiScanner.flex"
           return GetTokenInfo(REAL,TokenType.Literal); 
#line default
          }
          break;
        case 63: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 598 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_type,TokenType.Keyword); 
#line default
          }
          break;
        case 84: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 593 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_stored,TokenType.Keyword); 
#line default
          }
          break;
        case 18: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 475 "..\\..\\DelphiScanner.flex"
                   
                   yybegin(COMMENT1); 
                   FActualStart = FCurrentPos; 
                 
#line default
          }
          break;
        case 92: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 579 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_public,TokenType.Keyword); 
#line default
          }
          break;
        case 101: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 571 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_package,TokenType.Keyword); 
#line default
          }
          break;
        case 31: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 566 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_on,TokenType.Keyword); 
#line default
          }
          break;
        case 99: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 530 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_dynamic,TokenType.Keyword); 
#line default
          }
          break;
        case 117: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 577 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_property,TokenType.Keyword); 
#line default
          }
          break;
        case 93: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 542 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_forward,TokenType.Keyword); 
#line default
          }
          break;
        case 22: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 615 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(CHAR_Value,TokenType.Literal); 
#line default
          }
          break;
        case 37: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 497 "..\\..\\DelphiScanner.flex"
                      yybegin(YYINITIAL); 
                      FCurrentPos = FActualStart; // What point does the comment start  
                      return GetTokenInfo(COMMENT_BraceStar,TokenType.Comment); 
                    
#line default
          }
          break;
        case 2: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 502 "..\\..\\DelphiScanner.flex"
                     /* Text Data get more */ 
#line default
          }
          break;
        case 121: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 580 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_published,TokenType.Keyword); 
#line default
          }
          break;
        case 118: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 562 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_nodefault,TokenType.Keyword); 
#line default
          }
          break;
        case 41: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 537 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_far,TokenType.Keyword); 
#line default
          }
          break;
        case 94: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 540 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_finally,TokenType.Keyword); 
#line default
          }
          break;
        case 91: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 572 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_pascal,TokenType.Keyword); 
#line default
          }
          break;
        case 128: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 521 "..\\..\\DelphiScanner.flex"
                          return GetTokenInfo(KEYWORD_constructor,TokenType.Keyword); 
#line default
          }
          break;
        case 85: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 594 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_string,TokenType.Keyword); 
#line default
          }
          break;
        case 90: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 526 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_dispid,TokenType.Keyword); 
#line default
          }
          break;
        case 98: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 523 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_default,TokenType.Keyword); 
#line default
          }
          break;
        case 46: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 512 "..\\..\\DelphiScanner.flex"
                               return GetTokenInfo(KEYWORD_and,TokenType.Keyword); 
#line default
          }
          break;
        case 34: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 545 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_if,TokenType.Keyword); 
#line default
          }
          break;
        case 100: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 557 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_message,TokenType.Keyword); 
#line default
          }
          break;
        case 123: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 575 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_procedure,TokenType.Keyword); 
#line default
          }
          break;
        case 16: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 481 "..\\..\\DelphiScanner.flex"
                       yybegin(YYINITIAL); FCurrentPos = FActualStart; return GetTokenInfo(COMMENT_CurlyBrace,TokenType.Comment); 
#line default
          }
          break;
        case 114: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 586 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_requires,TokenType.Keyword); 
#line default
          }
          break;
        case 70: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 606 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_with,TokenType.Keyword); 
#line default
          }
          break;
        case 12: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 625 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(OPEN_SquareBrace,TokenType.Delimiter); 
#line default
          }
          break;
        case 126: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 547 "..\\..\\DelphiScanner.flex"
                         return GetTokenInfo(KEYWORD_implements,TokenType.Keyword); 
#line default
          }
          break;
        case 26: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 620 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(DOES_NotEqual,TokenType.Operator); 
#line default
          }
          break;
        case 53: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 561 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_nil,TokenType.Keyword); 
#line default
          }
          break;
        case 52: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 563 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_not,TokenType.Keyword); 
#line default
          }
          break;
        case 112: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 570 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_override,TokenType.Keyword); 
#line default
          }
          break;
        case 17: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 501 "..\\..\\DelphiScanner.flex"
                      /* get more */ 
#line default
          }
          break;
        case 86: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 564 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_object,TokenType.Keyword); 
#line default
          }
          break;
        case 51: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 597 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_try,TokenType.Keyword); 
#line default
          }
          break;
        case 54: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 527 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_div,TokenType.Keyword); 
#line default
          }
          break;
        case 13: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 626 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(CLOSE_SquareBrace,TokenType.Delimiter); 
#line default
          }
          break;
        case 57: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 608 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_xor,TokenType.Keyword); 
#line default
          }
          break;
        case 79: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 548 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_index,TokenType.Keyword); 
#line default
          }
          break;
        case 122: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 578 "..\\..\\DelphiScanner.flex"
                        return GetTokenInfo(KEYWORD_protected,TokenType.Keyword); 
#line default
          }
          break;
        case 116: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 573 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_platform,TokenType.Keyword); 
#line default
          }
          break;
        case 87: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 582 "..\\..\\DelphiScanner.flex"
                     return GetTokenInfo(KEYWORD_record,TokenType.Keyword); 
#line default
          }
          break;
        case 95: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 535 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_exports,TokenType.Keyword); 
#line default
          }
          break;
        case 33: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 528 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_do,TokenType.Keyword); 
#line default
          }
          break;
        case 43: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 614 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(CHAR_HexValue,TokenType.Literal); 
#line default
          }
          break;
        case 132: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 546 "..\\..\\DelphiScanner.flex"
                             return GetTokenInfo(KEYWORD_implementation,TokenType.Keyword); 
#line default
          }
          break;
        case 66: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 517 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_case,TokenType.Keyword); 
#line default
          }
          break;
        case 80: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 607 "..\\..\\DelphiScanner.flex"
                    return GetTokenInfo(KEYWORD_write,TokenType.Keyword); 
#line default
          }
          break;
        case 30: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 567 "..\\..\\DelphiScanner.flex"
                 return GetTokenInfo(KEYWORD_or,TokenType.Keyword); 
#line default
          }
          break;
        case 65: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 581 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_read,TokenType.Keyword); 
#line default
          }
          break;
        case 97: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 555 "..\\..\\DelphiScanner.flex"
                      return GetTokenInfo(KEYWORD_library,TokenType.Keyword); 
#line default
          }
          break;
        case 55: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 558 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(KEYWORD_mod,TokenType.Keyword); 
#line default
          }
          break;
        case 21: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 490 "..\\..\\DelphiScanner.flex"
                   
                    yybegin(COMMENT2); 
                    FActualStart = FCurrentPos; 
                 
#line default
          }
          break;
        case 14: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 629 "..\\..\\DelphiScanner.flex"
                  return GetTokenInfo(END_Statement,TokenType.Delimiter); 
#line default
          }
          break;
        case 107: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 536 "..\\..\\DelphiScanner.flex"
                       return GetTokenInfo(KEYWORD_external,TokenType.Keyword); 
#line default
          }
          break;
        case 5: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 628 "..\\..\\DelphiScanner.flex"
                return GetTokenInfo(OPERATORS,TokenType.Operator); 
#line default
          }
          break;
        case 130: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 587 "..\\..\\DelphiScanner.flex"
                             return GetTokenInfo(KEYWORD_resourcestring,TokenType.Keyword); 
#line default
          }
          break;
        case 59: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 538 "..\\..\\DelphiScanner.flex"
                   return GetTokenInfo(KEYWORD_file,TokenType.Keyword); 
#line default
          }
          break;
        case 109: 
          if (SCANNER_SpuriousWarningsSucks)
          {
#line 511 "..\\..\\DelphiScanner.flex"
                               return GetTokenInfo(KEYWORD_abstract,TokenType.Keyword); 
#line default
          }
          break;
        default: 
          if (zzInput == SCANNER_Eof && zzStartRead == FCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (FLexicalState) {
            case COMMENT1:
              if (SCANNER_SpuriousWarningsSucks)
              {
#line 484 "..\..\DelphiScanner.flex"
                      FCurrentPos = FActualStart;
                      TokenInfo lResult = GetTokenInfo(COMMENT_CurlyBrace,TokenType.Comment); 
                      FActualStart = 0; //You are passing in one line at a time so next comment start point will be zero
                      return lResult;
                    
#line default
              }
              break;
            case COMMENT2:
              if (SCANNER_SpuriousWarningsSucks)
              {
#line 503 "..\..\DelphiScanner.flex"
                      FCurrentPos = FActualStart;
                      TokenInfo lResult = GetTokenInfo(COMMENT_BraceStar,TokenType.Comment); 
                      FActualStart = 0; //You are passing in one line at a time so next comment start point will be zero
                      return lResult;
                    
#line default
              }
              break;
            default:
              if (SCANNER_SpuriousWarningsSucks)
              {
#line 638 "..\..\DelphiScanner.flex"
          return GetTokenInfo(-1,TokenType.Unknown); 
#line default
              }
              break;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
#line 641 "..\..\DelphiScanner.flex"

} // end namespace

#line default
