
  /** This character denotes the end of file */
  public static final int SCANNER_Eof = -1;

  /** initial size of the lookahead buffer */
--- C# version

  /** This character denotes the end of file */
  public const int SCANNER_Eof = -1;

  /** initial size of the lookahead buffer */
--- private static final int SCANNER_BufferSize = ...;

  /** lexical states */
--- C# version (identical in this case)

  /** lexical states */
---  lexical states, charmap

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

---  C# version

  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

--- isFinal list
  /** the input device */
  private java.io.Reader FReader;

  /** the current state of the DFA */
  private int FState;

  /** the current lexical state */
  private int FLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char FBuffer[] = new char[SCANNER_BufferSize];

  /** the textposition at the last accepting state */
  private int FMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int FPushbackPos;

  /** the current text position in the buffer */
  private int FCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   
  private boolean zzAtBOL = true;
   */
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class FlexStreamInfo {
    java.io.Reader FReader;
    int zzEndRead;
    int zzStartRead;
    int FCurrentPos;
    int FMarkedPos;
    int FPushbackPos;
    int yyline;
    int yycolumn;
    char [] FBuffer;
    boolean zzAtEOF;

    /** sets all values stored in this class */
    FlexStreamInfo(java.io.Reader aReader, int aEndRead, int aStartRead,
                  int aCurrentPos, int aMarkedPos, int aPushbackPos,
                  char [] aBuffer, boolean aAtEOF, int aLine, int aColumn) {
      this.FReader      = aReader;
      this.zzEndRead     = aEndRead;
      this.zzStartRead   = aStartRead;
      this.FCurrentPos  = aCurrentPos;
      this.FMarkedPos   = aMarkedPos;
      this.FPushbackPos = aPushbackPos;
      this.FBuffer      = aBuffer;
      this.zzAtEOF       = aAtEOF;
      this.yyline         = aLine;
      this.yycolumn       = aColumn;
    }
  }

--- C# version
  /** the input device */
  private System.IO.TextReader FReader;

  /** the current state of the DFA */
  private int FState;

  /** the current lexical state */
  private int FLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] FBuffer = new char[SCANNER_BufferSize];

  /** the textposition at the last accepting state */
  private int FMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int FPushbackPos;

  /** the current text position in the buffer */
  private int FCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
  
  private bool zzAtBOL = true;
    */
  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private System.Collections.Stack zzStreams = new System.Collections.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private sealed class FlexStreamInfo {
    public System.IO.TextReader FReader;
    public int zzEndRead;
    public int zzStartRead;
    public int FCurrentPos;
    public int FMarkedPos;
    public int FPushbackPos;
    public int yyline;
    public int yycolumn;
    public char [] FBuffer;
    public bool zzAtEOF;

    /** sets all values stored in this class */
    public FlexStreamInfo(System.IO.TextReader FReader, int zzEndRead, int zzStartRead,
                  int FCurrentPos, int FMarkedPos, int FPushbackPos,
                  char [] FBuffer, bool zzAtEOF, int yyline, int yycolumn) {
      this.FReader      = FReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.FCurrentPos  = FCurrentPos;
      this.FMarkedPos   = FMarkedPos;
      this.FPushbackPos = FPushbackPos;
      this.FBuffer      = FBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

--- user class code

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
--- C# version

  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
--- constructor declaration


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(FBuffer, zzStartRead,
                       FBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      FCurrentPos-= zzStartRead;
      FMarkedPos-= zzStartRead;
      FPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (FCurrentPos >= FBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[FCurrentPos*2];
      System.arraycopy(FBuffer, 0, newBuffer, 0, FBuffer.length);
      FBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = FReader.read(FBuffer, zzEndRead,
                                            FBuffer.length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (FReader != null)
      FReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new FlexStreamInfo(FReader, zzEndRead, zzStartRead, FCurrentPos,
                        FMarkedPos, FPushbackPos, FBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    FBuffer = new char[SCANNER_BufferSize];
    FReader = reader;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    FReader.close();
    FlexStreamInfo s = (FlexStreamInfo) zzStreams.pop();
    FBuffer      = s.FBuffer;
    FReader      = s.FReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    FCurrentPos  = s.FCurrentPos;
    FMarkedPos   = s.FMarkedPos ;
    FPushbackPos = s.FPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    FReader = reader;
    //zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    FLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return FLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    FLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( FBuffer, zzStartRead, FMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return FBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return FMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- C# version


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* is the buffer big enough? */
    if (FCurrentPos >= FBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[FCurrentPos*2];
      Array.Copy(FBuffer, 0, newBuffer, 0, FBuffer.Length);
      FBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = FReader.Read(FBuffer, zzEndRead,FBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (FReader != null)
      FReader.Close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public void yypushStream(TextReader reader) {
    zzStreams.Push(
      new FlexStreamInfo(FReader, zzEndRead, zzStartRead, FCurrentPos,
                        FMarkedPos, FPushbackPos, FBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    FBuffer = new char[SCANNER_BufferSize];
    FReader = reader;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws System.InvalidOperationException
   *         if there is no further stream to read from.
   *
   * @throws System.IO.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(TextReader)
   */
  public void yypopStream() {
    FReader.Close();
    FlexStreamInfo s = (FlexStreamInfo) zzStreams.Pop();
    FBuffer      = s.FBuffer;
    FReader      = s.FReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    FCurrentPos  = s.FCurrentPos;
    FMarkedPos   = s.FMarkedPos ;
    FPushbackPos = s.FPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public bool yymoreStreams() {
    return zzStreams.Count != 0;
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(System.IO.TextReader)
   * @see #yypopStream()
   */
  public void yyreset(System.IO.TextReader reader) {
    FReader = reader;
   // zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    FCurrentPos = FMarkedPos = FPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    FLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return FLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    FLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( FBuffer, zzStartRead, FMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return FBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return FMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- zzScanError declaration
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

--- C# version
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

--- throws clause
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- C# version (identical in this case)
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- yypushback decl (contains zzScanError exception)
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    FMarkedPos -= number;
  }


--- C# version (identical in this case)
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    FMarkedPos -= number;
  }


--- zzDoEOF
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
--- C# version
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
--- yylex declaration
    int zzInput;
    int zzAction;

--- C# version
    int zzInput = 0;
    int zzAction;

--- local declarations

    while (true) {
      // cached fields:
      int lCurrentPos;
      int zzMarkedPosL = FMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = FBuffer;
      char [] zzCMapL = ZZ_CMAP;

--- C# version (identical in this case)

    while (true) {
      // cached fields:
      int lCurrentPos;
      int zzMarkedPosL = FMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = FBuffer;
      char [] zzCMapL = ZZ_CMAP;

--- start admin (line, char, col count)
      zzAction = -1;

      lCurrentPos = FCurrentPos = zzStartRead = zzMarkedPosL;
  
--- C# version (identical in this case)
      zzAction = -1;

      lCurrentPos = FCurrentPos = zzStartRead = zzMarkedPosL;
  
--- start admin (lexstate etc)

      zzForAction: {
        while (true) {
    
--- C# version

        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!SCANNER_SpuriousWarningsSucks) goto zzForAction;
    
--- next input, line, col, char count, next transition, isFinal action
            zzAction = FState;
            zzMarkedPosL = lCurrentPos;
--- C# version (identcal in this case)
            zzAction = FState;
            zzMarkedPosL = lCurrentPos;
--- line count update
          }

        }
      }

      // store back cached position
      FMarkedPos = zzMarkedPosL;
--- C# version
          }

        }

      // store back cached position
      FMarkedPos = zzMarkedPosL;
--- char count update

--- C# version (identical in this case)

--- actions
        default: 
          if (zzInput == SCANNER_Eof && zzStartRead == FCurrentPos) {
            zzAtEOF = true;
--- C# version (identical in this case)
        default: 
          if (zzInput == SCANNER_Eof && zzStartRead == FCurrentPos) {
            zzAtEOF = true;
--- eofvalue
          } 
          else {
--- C# version (identical in this case)
          } 
          else {
--- no match
          }
      }
    }
  }

--- C# version
          }
          break;
      }
    }
  }

--- main

}
--- C# version (identical in this case)

}
